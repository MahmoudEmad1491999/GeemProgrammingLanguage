//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/mahmoud/.projects/graduation_projects/GeemProgrammingLanguage/Geem/Parser/Geem.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Geem.Parser {
using Geem.Infrastructure;
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GeemParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, Int_literal=3, LP=4, RP=5, LSB=6, RSB=7, LCB=8, RCB=9, 
		ADDRESS_OF_OPERATOR=10, VALUE_INSIDE_OPERATOR=11, SIZE_OF=12, FASLA=13, 
		FASLA_MANQUOTA=14, COLON=15, PLUS=16, MINUS=17, MULTIPLY=18, DIVIDE=19, 
		ARABIC_MODULS=20, MODULUS=21, LAND=22, LOR=23, LNOT=24, SL_SYM=25, SRA_SYM=26, 
		SR_SYM=27, BAND_SYM=28, BOR_SYM=29, BXOR_SYM=30, BNOT_SYM=31, LTE_SYM=32, 
		GTE_SYM=33, LT_SYM=34, GT_SYM=35, EQUAL_SYM=36, NOTEQ_SYM=37, ASSIGN_SYM=38, 
		FUNC_KEYWORD=39, OP_KEYWORD=40, RET_KEYWORD=41, RES_KEYWORD=42, IF_KEYWORD=43, 
		WHILE_KEYWORD=44, BREAK_KEYWORD=45, CONTINUE_KEYWORRD=46, INT_DATA_TYPE=47, 
		UINT_DATA_TYPE=48, BYTE_DATA_TYPE=49, UBYTE_DATA_TYPE=50, SHORT_DATA_TYPE=51, 
		USHORT_DATA_TYPE=52, LONG_DATA_TYPE=53, ULONG_DATA_TYPE=54, BOOL_DATA_TYPE=55, 
		WHITE_SPACE=56, ID=57;
	public const int
		RULE_program = 0, RULE_globalVarDecl = 1, RULE_inititalization = 2, RULE_functionDecl = 3, 
		RULE_operationDecl = 4, RULE_parameter = 5, RULE_paramList = 6, RULE_argument = 7, 
		RULE_argumentList = 8, RULE_expression = 9, RULE_sub_expression = 10, 
		RULE_comparison_op = 11, RULE_equality_op = 12, RULE_statement = 13, RULE_statementList = 14, 
		RULE_operationStat = 15, RULE_assignmentStat = 16, RULE_ifStat = 17, RULE_whileStat = 18, 
		RULE_returnStat = 19, RULE_resultStat = 20, RULE_varDecl = 21, RULE_commandStat = 22, 
		RULE_datatype = 23, RULE_command = 24;
	public static readonly string[] ruleNames = {
		"program", "globalVarDecl", "inititalization", "functionDecl", "operationDecl", 
		"parameter", "paramList", "argument", "argumentList", "expression", "sub_expression", 
		"comparison_op", "equality_op", "statement", "statementList", "operationStat", 
		"assignmentStat", "ifStat", "whileStat", "returnStat", "resultStat", "varDecl", 
		"commandStat", "datatype", "command"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u0625\u0637\u0628\u0639'", "'\u0627\u0637\u0628\u0639'", null, 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'&:'", "'*:'", "'\u062D\u062C\u0645:'", 
		"'\u060C'", "'\u061B'", "':'", "'+'", "'-'", "'\u00D7'", "'\u00F7'", "'\u066A'", 
		"'%'", "'&&'", "'||'", "'!'", "'<<'", "'>>>'", "'>>'", "'&'", "'|'", "'^'", 
		"'~'", "'<='", "'>='", "'<'", "'>'", "'=='", "'!='", "'='", "'\u062F\u0627\u0644\u0629'", 
		"'\u0639\u0645\u0644\u064A\u0629'", "'\u0631\u062C\u0648\u0639'", "'\u0627\u0644\u0646\u0627\u062A\u062C'", 
		null, "'\u0637\u0627\u0644\u0645\u0627'", "'\u0642\u0637\u0639'", null, 
		"'\u0635_\u0664'", "'\u0637_\u0664'", "'\u0635_\u0661'", "'\u0637_\u0661'", 
		"'\u0635_\u0662'", "'\u0637_\u0662'", "'\u0635_\u0668'", "'\u0637_\u0668'", 
		"'\u0645\u0646\u0637\u0642\u064A'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "Int_literal", "LP", "RP", "LSB", "RSB", "LCB", "RCB", 
		"ADDRESS_OF_OPERATOR", "VALUE_INSIDE_OPERATOR", "SIZE_OF", "FASLA", "FASLA_MANQUOTA", 
		"COLON", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "ARABIC_MODULS", "MODULUS", 
		"LAND", "LOR", "LNOT", "SL_SYM", "SRA_SYM", "SR_SYM", "BAND_SYM", "BOR_SYM", 
		"BXOR_SYM", "BNOT_SYM", "LTE_SYM", "GTE_SYM", "LT_SYM", "GT_SYM", "EQUAL_SYM", 
		"NOTEQ_SYM", "ASSIGN_SYM", "FUNC_KEYWORD", "OP_KEYWORD", "RET_KEYWORD", 
		"RES_KEYWORD", "IF_KEYWORD", "WHILE_KEYWORD", "BREAK_KEYWORD", "CONTINUE_KEYWORRD", 
		"INT_DATA_TYPE", "UINT_DATA_TYPE", "BYTE_DATA_TYPE", "UBYTE_DATA_TYPE", 
		"SHORT_DATA_TYPE", "USHORT_DATA_TYPE", "LONG_DATA_TYPE", "ULONG_DATA_TYPE", 
		"BOOL_DATA_TYPE", "WHITE_SPACE", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Geem.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GeemParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		string get_expr_type(string type1, string type2)
		{
			if(type1 == "int") { return "int";};
			if(type2 == "int") {return "int";};
			return "uint";
		}

		public GeemParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GeemParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclContext[] globalVarDecl() {
			return GetRuleContexts<GlobalVarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclContext globalVarDecl(int i) {
			return GetRuleContext<GlobalVarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationDeclContext[] operationDecl() {
			return GetRuleContexts<OperationDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationDeclContext operationDecl(int i) {
			return GetRuleContext<OperationDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatContext[] commandStat() {
			return GetRuleContexts<CommandStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatContext commandStat(int i) {
			return GetRuleContext<CommandStatContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ProgramContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program(SymbolTable st) {
		ProgramContext _localctx = new ProgramContext(Context, State, st);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 54;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT_DATA_TYPE:
				case UINT_DATA_TYPE:
				case BYTE_DATA_TYPE:
				case UBYTE_DATA_TYPE:
				case SHORT_DATA_TYPE:
				case USHORT_DATA_TYPE:
				case LONG_DATA_TYPE:
				case ULONG_DATA_TYPE:
					{
					State = 50;
					globalVarDecl(st);
					}
					break;
				case FUNC_KEYWORD:
					{
					State = 51;
					functionDecl(st);
					}
					break;
				case OP_KEYWORD:
					{
					State = 52;
					operationDecl(st);
					}
					break;
				case COLON:
					{
					State = 53;
					commandStat(st);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COLON) | (1L << FUNC_KEYWORD) | (1L << OP_KEYWORD) | (1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclContext : ParserRuleContext {
		public SymbolTable st;
		public DatatypeContext _datatype;
		public IToken _ID;
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InititalizationContext inititalization() {
			return GetRuleContext<InititalizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public GlobalVarDeclContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public GlobalVarDeclContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_globalVarDecl; } }
	}

	[RuleVersion(0)]
	public GlobalVarDeclContext globalVarDecl(SymbolTable st) {
		GlobalVarDeclContext _localctx = new GlobalVarDeclContext(Context, State, st);
		EnterRule(_localctx, 2, RULE_globalVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			_localctx._datatype = datatype();
			State = 59;
			_localctx._ID = Match(ID);
			State = 60;
			inititalization(st);
			State = 61;
			Match(FASLA_MANQUOTA);

					st.addSymbol((_localctx._ID!=null?_localctx._ID.Text:null), new SymbolInfo(SymbolType.SymbolOfGlobalVariable, new VarInfo((_localctx._datatype!=null?TokenStream.GetText(_localctx._datatype.Start,_localctx._datatype.Stop):null), null)));
				
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InititalizationContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_SYM() { return GetToken(GeemParser.ASSIGN_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InititalizationContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public InititalizationContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_inititalization; } }
	}

	[RuleVersion(0)]
	public InititalizationContext inititalization(SymbolTable st) {
		InititalizationContext _localctx = new InititalizationContext(Context, State, st);
		EnterRule(_localctx, 4, RULE_inititalization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 64;
			Match(ASSIGN_SYM);
			State = 65;
			expression(st);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public SymbolTable st;
		public IToken _ID;
		public ParamListContext _paramList;
		public DatatypeContext _datatype;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_KEYWORD() { return GetToken(GeemParser.FUNC_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GeemParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(GeemParser.RCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(GeemParser.LCB, 0); }
		public FunctionDeclContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FunctionDeclContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl(SymbolTable st) {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State, st);
		EnterRule(_localctx, 6, RULE_functionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(FUNC_KEYWORD);
			State = 68;
			_localctx._ID = Match(ID);
			State = 69;
			Match(RP);
			State = 70;
			_localctx._paramList = paramList();
			State = 71;
			Match(LP);
			State = 72;
			Match(COLON);
			State = 73;
			_localctx._datatype = datatype();
			State = 74;
			Match(RCB);
			State = 75;
			statementList(st);
			State = 76;
			Match(LCB);

					st.addSymbol((_localctx._ID!=null?_localctx._ID.Text:null), new SymbolInfo(SymbolType.SymbolOfFunction, new FunctionInfo(_localctx._paramList.parameter_datatypes_list.ToArray(), (_localctx._datatype!=null?TokenStream.GetText(_localctx._datatype.Start,_localctx._datatype.Stop):null))));
				
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclContext : ParserRuleContext {
		public SymbolTable st;
		public IToken _ID;
		public ParamListContext _paramList;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_KEYWORD() { return GetToken(GeemParser.OP_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(GeemParser.RCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(GeemParser.LCB, 0); }
		public OperationDeclContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public OperationDeclContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_operationDecl; } }
	}

	[RuleVersion(0)]
	public OperationDeclContext operationDecl(SymbolTable st) {
		OperationDeclContext _localctx = new OperationDeclContext(Context, State, st);
		EnterRule(_localctx, 8, RULE_operationDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(OP_KEYWORD);
			State = 80;
			_localctx._ID = Match(ID);
			State = 81;
			Match(RP);
			State = 82;
			_localctx._paramList = paramList();
			State = 83;
			Match(LP);
			State = 84;
			Match(RCB);
			State = 85;
			statementList(st);
			State = 86;
			Match(LCB);

					st.addSymbol((_localctx._ID!=null?_localctx._ID.Text:null), new SymbolInfo(SymbolType.SymbolOfOperation, new OperationInfo(_localctx._paramList.parameter_datatypes_list.ToArray())));
				
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public string dt;
		public DatatypeContext _datatype;
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			_localctx._datatype = datatype();
			State = 90;
			Match(ID);
			_localctx.dt =  (_localctx._datatype!=null?TokenStream.GetText(_localctx._datatype.Start,_localctx._datatype.Stop):null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public List<string> parameter_datatypes_list;
		public ParameterContext _parameter;
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FASLA() { return GetTokens(GeemParser.FASLA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA(int i) {
			return GetToken(GeemParser.FASLA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 12, RULE_paramList);

			_localctx.parameter_datatypes_list =  new List<string>();

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE))) != 0)) {
				{
				State = 93;
				_localctx._parameter = parameter();
				_localctx.parameter_datatypes_list.Add(_localctx._parameter.dt);
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FASLA) {
					{
					{
					State = 95;
					Match(FASLA);
					State = 96;
					_localctx._parameter = parameter();
					_localctx.parameter_datatypes_list.Add(_localctx._parameter.dt);
					}
					}
					State = 103;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ArgumentContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_argument; } }
	}

	[RuleVersion(0)]
	public ArgumentContext argument(SymbolTable st) {
		ArgumentContext _localctx = new ArgumentContext(Context, State, st);
		EnterRule(_localctx, 14, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			expression(st);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public SymbolTable st;
		public int length;
		public string[] datatypes;
		public List<string> datatypes_list;
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FASLA() { return GetTokens(GeemParser.FASLA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA(int i) {
			return GetToken(GeemParser.FASLA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ArgumentListContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList(SymbolTable st) {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State, st);
		EnterRule(_localctx, 16, RULE_argumentList);
		_localctx.length =  0; _localctx.datatypes_list =  new List<string>();
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Int_literal) | (1L << RP) | (1L << MINUS) | (1L << LNOT) | (1L << ID))) != 0)) {
				{
				State = 108;
				argument(st);
				_localctx.length++;
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FASLA) {
					{
					{
					State = 110;
					Match(FASLA);
					State = 111;
					argument(st);
					_localctx.length++;
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public SymbolTable st;
		public string expr_type;
		public string expr_datatype;
		public IToken _ID;
		public ArgumentListContext _argumentList;
		public Sub_expressionContext _sub_expression;
		public ExpressionContext _expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GeemParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LNOT() { return GetToken(GeemParser.LNOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int_literal() { return GetToken(GeemParser.Int_literal, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ExpressionContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression(SymbolTable st) {
		ExpressionContext _localctx = new ExpressionContext(Context, State, st);
		EnterRule(_localctx, 18, RULE_expression);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				_localctx._ID = Match(ID);
				State = 122;
				Match(RP);
				State = 123;
				_localctx._argumentList = argumentList(st);
				State = 124;
				Match(LP);
				State = 125;
				_localctx._sub_expression = sub_expression(st, ((FunctionInfo)st.getSymbolInfo((_localctx._ID!=null?_localctx._ID.Text:null)).specificInfo).return_type);

					SymbolInfo symbol_info_of_id = st.getSymbolInfo((_localctx._ID!=null?_localctx._ID.Text:null));
					// check if the symbol is for a function.
					if(symbol_info_of_id.type != SymbolType.SymbolOfFunction) 
					{
						throw new Exception("ID is not of a function");
					}
					var symbolSpecificInfo = (FunctionInfo) symbol_info_of_id.specificInfo;
					// check the number of arguments match the number of parameters.
					
					if(_localctx._argumentList.length != symbolSpecificInfo.parameter_datatypes.Length)
					{
						throw new Exception("Number of arguments is not equal to number of parameters");
					}
					// set the type of expr to function call.
					_localctx.expr_type =  _localctx._sub_expression.expr_type == "" ? "function_call_expr": _localctx._sub_expression.expr_type;
					// set the datatype of expr to the return type of the function.
					_localctx.expr_datatype =  symbolSpecificInfo.return_type;

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				Match(MINUS);
				State = 129;
				expression(st);
				State = 130;
				_localctx._sub_expression = sub_expression(st, "int");

					// set the expression type to minus datatype of the datatype of sub_expression.
					_localctx.expr_type =  _localctx._sub_expression.expr_type == "" ? "minus_expr":_localctx._sub_expression.expr_type ;

					// set the expression datatype to int.
					_localctx.expr_datatype =  "int";

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133;
				Match(LNOT);
				State = 134;
				expression(st);
				State = 135;
				_localctx._sub_expression = sub_expression(st, "int");

					// set the expression type to lnot_expr or sub_expression type.
					_localctx.expr_type =  _localctx._sub_expression.expr_type == "" ? "lnot_expr": _localctx._sub_expression.expr_type;
					// set the expression datatype to int.
					_localctx.expr_datatype =  "int";

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 138;
				Match(RP);
				State = 139;
				_localctx._expression = expression(st);
				State = 140;
				Match(LP);
				State = 141;
				_localctx._sub_expression = sub_expression(st, _localctx._expression.expr_type);

					// set the expression type to paren_expr or sub_expression type.
					_localctx.expr_type =  _localctx._sub_expression.expr_type == "" ? "paren_expr" :_localctx._sub_expression.expr_type ;

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 144;
				Match(Int_literal);
				State = 145;
				_localctx._sub_expression = sub_expression(st, "uint");
				_localctx.expr_type =  _localctx._sub_expression.expr_type == "" ? "int_lit_expr": _localctx._sub_expression.expr_type;
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 148;
				_localctx._ID = Match(ID);

					var symbolInfo = _localctx.st.getSymbolInfo((_localctx._ID!=null?_localctx._ID.Text:null));
					if(symbolInfo.type != SymbolType.SymbolOfGlobalVariable || 
					symbolInfo.type != SymbolType.SymbolOfLocalVariable || 
					symbolInfo.type != SymbolType.SymbolOfParameter ) {
						throw new Exception("Identifier is not for variable");
					}

				State = 150;
				_localctx._sub_expression = sub_expression(st,((VarInfo)(_localctx.st.getSymbolInfo((_localctx._ID!=null?_localctx._ID.Text:null)).specificInfo)).datatype);

					_localctx.expr_type =  _localctx._sub_expression.expr_type == "" ? "variable_expr": _localctx._sub_expression.expr_type;

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_expressionContext : ParserRuleContext {
		public SymbolTable st;
		public string pre_expr_datatype;
		public string expr_type;
		public string sub_expression_datatype;
		public ExpressionContext _expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(GeemParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(GeemParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GeemParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GeemParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_opContext comparison_op() {
			return GetRuleContext<Comparison_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_opContext equality_op() {
			return GetRuleContext<Equality_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAND() { return GetToken(GeemParser.LAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOR() { return GetToken(GeemParser.LOR, 0); }
		public Sub_expressionContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Sub_expressionContext(ParserRuleContext parent, int invokingState, SymbolTable st, string pre_expr_datatype)
			: base(parent, invokingState)
		{
			this.st = st;
			this.pre_expr_datatype = pre_expr_datatype;
		}
		public override int RuleIndex { get { return RULE_sub_expression; } }
	}

	[RuleVersion(0)]
	public Sub_expressionContext sub_expression(SymbolTable st, string pre_expr_datatype) {
		Sub_expressionContext _localctx = new Sub_expressionContext(Context, State, st, pre_expr_datatype);
		EnterRule(_localctx, 20, RULE_sub_expression);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				Match(DIVIDE);
				State = 156;
				_localctx._expression = expression(st);
				State = 157;
				sub_expression(st,get_expr_type(_localctx._expression.expr_datatype, _localctx.pre_expr_datatype));
				_localctx.expr_type =  "divide_expr";
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				Match(MULTIPLY);
				State = 161;
				_localctx._expression = expression(st);
				State = 162;
				sub_expression(st,get_expr_type(_localctx._expression.expr_datatype, _localctx.pre_expr_datatype));
				_localctx.expr_type =  "multiply_expr";
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				Match(MINUS);
				State = 166;
				_localctx._expression = expression(st);
				State = 167;
				sub_expression(st,get_expr_type(_localctx._expression.expr_datatype, _localctx.pre_expr_datatype));
				_localctx.expr_type =  "subtract_expr";
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 170;
				Match(PLUS);
				State = 171;
				_localctx._expression = expression(st);
				State = 172;
				sub_expression(st,get_expr_type(_localctx._expression.expr_datatype, _localctx.pre_expr_datatype));
				_localctx.expr_type =  "addition_expr";
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 175;
				comparison_op();
				State = 176;
				expression(st);
				State = 177;
				sub_expression(st, "int");
				_localctx.expr_type =  "comparison_expr";
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 180;
				equality_op();
				State = 181;
				expression(st);
				State = 182;
				sub_expression(st,"int");
				_localctx.expr_type =  "equality_expr";
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 185;
				Match(LAND);
				State = 186;
				expression(st);
				State = 187;
				sub_expression(st, "int");
				_localctx.expr_type =  "land_expr";
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 190;
				Match(LOR);
				State = 191;
				expression(st);
				State = 192;
				sub_expression(st, "int");
				_localctx.expr_type =  "lor_expr";
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				_localctx.expr_type =  "";
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE_SYM() { return GetToken(GeemParser.GTE_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE_SYM() { return GetToken(GeemParser.LTE_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_SYM() { return GetToken(GeemParser.GT_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_SYM() { return GetToken(GeemParser.LT_SYM, 0); }
		public Comparison_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_op; } }
	}

	[RuleVersion(0)]
	public Comparison_opContext comparison_op() {
		Comparison_opContext _localctx = new Comparison_opContext(Context, State);
		EnterRule(_localctx, 22, RULE_comparison_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTE_SYM) | (1L << GTE_SYM) | (1L << LT_SYM) | (1L << GT_SYM))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYM() { return GetToken(GeemParser.EQUAL_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQ_SYM() { return GetToken(GeemParser.NOTEQ_SYM, 0); }
		public Equality_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_op; } }
	}

	[RuleVersion(0)]
	public Equality_opContext equality_op() {
		Equality_opContext _localctx = new Equality_opContext(Context, State);
		EnterRule(_localctx, 24, RULE_equality_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL_SYM || _la==NOTEQ_SYM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SymbolTable st;
		public StatementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public StatementContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
			this.st = context.st;
		}
	}
	public partial class Command_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatContext commandStat() {
			return GetRuleContext<CommandStatContext>(0);
		}
		public Command_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Var_Decl_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public Var_Decl_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class If_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		public If_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Return_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatContext returnStat() {
			return GetRuleContext<ReturnStatContext>(0);
		}
		public Return_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class While_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatContext whileStat() {
			return GetRuleContext<WhileStatContext>(0);
		}
		public While_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Result_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResultStatContext resultStat() {
			return GetRuleContext<ResultStatContext>(0);
		}
		public Result_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Operation_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationStatContext operationStat() {
			return GetRuleContext<OperationStatContext>(0);
		}
		public Operation_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Assignment_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatContext assignmentStat() {
			return GetRuleContext<AssignmentStatContext>(0);
		}
		public Assignment_StatContext(StatementContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public StatementContext statement(SymbolTable st) {
		StatementContext _localctx = new StatementContext(Context, State, st);
		EnterRule(_localctx, 26, RULE_statement);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new Assignment_StatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				assignmentStat(st);
				}
				break;
			case 2:
				_localctx = new Return_StatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				returnStat(st);
				}
				break;
			case 3:
				_localctx = new Result_StatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 204;
				resultStat(st);
				}
				break;
			case 4:
				_localctx = new If_StatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 205;
				ifStat(st);
				}
				break;
			case 5:
				_localctx = new While_StatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 206;
				whileStat(st);
				}
				break;
			case 6:
				_localctx = new Var_Decl_StatContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 207;
				varDecl(st);
				}
				break;
			case 7:
				_localctx = new Operation_StatContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 208;
				operationStat(st);
				}
				break;
			case 8:
				_localctx = new Command_StatContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 209;
				commandStat(st);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public StatementListContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_statementList; } }
	}

	[RuleVersion(0)]
	public StatementListContext statementList(SymbolTable st) {
		StatementListContext _localctx = new StatementListContext(Context, State, st);
		EnterRule(_localctx, 28, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COLON) | (1L << RET_KEYWORD) | (1L << RES_KEYWORD) | (1L << IF_KEYWORD) | (1L << WHILE_KEYWORD) | (1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE) | (1L << ID))) != 0)) {
				{
				{
				State = 212;
				statement(st);
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationStatContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public OperationStatContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public OperationStatContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_operationStat; } }
	}

	[RuleVersion(0)]
	public OperationStatContext operationStat(SymbolTable st) {
		OperationStatContext _localctx = new OperationStatContext(Context, State, st);
		EnterRule(_localctx, 30, RULE_operationStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(ID);
			State = 219;
			Match(RP);
			State = 220;
			argumentList(st);
			State = 221;
			Match(LP);
			State = 222;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_SYM() { return GetToken(GeemParser.ASSIGN_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public AssignmentStatContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public AssignmentStatContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_assignmentStat; } }
	}

	[RuleVersion(0)]
	public AssignmentStatContext assignmentStat(SymbolTable st) {
		AssignmentStatContext _localctx = new AssignmentStatContext(Context, State, st);
		EnterRule(_localctx, 32, RULE_assignmentStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(ID);
			State = 225;
			Match(ASSIGN_SYM);
			State = 226;
			expression(st);
			State = 227;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_KEYWORD() { return GetToken(GeemParser.IF_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(GeemParser.RCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(GeemParser.LCB, 0); }
		public IfStatContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public IfStatContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
	}

	[RuleVersion(0)]
	public IfStatContext ifStat(SymbolTable st) {
		IfStatContext _localctx = new IfStatContext(Context, State, st);
		EnterRule(_localctx, 34, RULE_ifStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(IF_KEYWORD);
			State = 230;
			Match(RP);
			State = 231;
			expression(st);
			State = 232;
			Match(LP);
			State = 233;
			Match(RCB);
			State = 234;
			statementList(st);
			State = 235;
			Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_KEYWORD() { return GetToken(GeemParser.WHILE_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(GeemParser.RCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(GeemParser.LCB, 0); }
		public WhileStatContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public WhileStatContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_whileStat; } }
	}

	[RuleVersion(0)]
	public WhileStatContext whileStat(SymbolTable st) {
		WhileStatContext _localctx = new WhileStatContext(Context, State, st);
		EnterRule(_localctx, 36, RULE_whileStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(WHILE_KEYWORD);
			State = 238;
			Match(RP);
			State = 239;
			expression(st);
			State = 240;
			Match(LP);
			State = 241;
			Match(RCB);
			State = 242;
			statementList(st);
			State = 243;
			Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RET_KEYWORD() { return GetToken(GeemParser.RET_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public ReturnStatContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ReturnStatContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_returnStat; } }
	}

	[RuleVersion(0)]
	public ReturnStatContext returnStat(SymbolTable st) {
		ReturnStatContext _localctx = new ReturnStatContext(Context, State, st);
		EnterRule(_localctx, 38, RULE_returnStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(RET_KEYWORD);
			State = 246;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultStatContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RES_KEYWORD() { return GetToken(GeemParser.RES_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public ResultStatContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ResultStatContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_resultStat; } }
	}

	[RuleVersion(0)]
	public ResultStatContext resultStat(SymbolTable st) {
		ResultStatContext _localctx = new ResultStatContext(Context, State, st);
		EnterRule(_localctx, 40, RULE_resultStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(RES_KEYWORD);
			State = 249;
			expression(st);
			State = 250;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InititalizationContext inititalization() {
			return GetRuleContext<InititalizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public VarDeclContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public VarDeclContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl(SymbolTable st) {
		VarDeclContext _localctx = new VarDeclContext(Context, State, st);
		EnterRule(_localctx, 42, RULE_varDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			datatype();
			State = 253;
			Match(ID);
			State = 254;
			inititalization(st);
			State = 255;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandStatContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public CommandStatContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public CommandStatContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_commandStat; } }
	}

	[RuleVersion(0)]
	public CommandStatContext commandStat(SymbolTable st) {
		CommandStatContext _localctx = new CommandStatContext(Context, State, st);
		EnterRule(_localctx, 44, RULE_commandStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			command(st);
			State = 258;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_DATA_TYPE() { return GetToken(GeemParser.INT_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT_DATA_TYPE() { return GetToken(GeemParser.UINT_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_DATA_TYPE() { return GetToken(GeemParser.BYTE_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBYTE_DATA_TYPE() { return GetToken(GeemParser.UBYTE_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT_DATA_TYPE() { return GetToken(GeemParser.SHORT_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USHORT_DATA_TYPE() { return GetToken(GeemParser.USHORT_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_DATA_TYPE() { return GetToken(GeemParser.LONG_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONG_DATA_TYPE() { return GetToken(GeemParser.ULONG_DATA_TYPE, 0); }
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_datatype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GeemParser.COLON, 0); }
		public CommandContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public CommandContext(ParserRuleContext parent, int invokingState, SymbolTable st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command(SymbolTable st) {
		CommandContext _localctx = new CommandContext(Context, State, st);
		EnterRule(_localctx, 48, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 262;
			Match(COLON);
			State = 263;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
			State = 265;
			expression(st);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ';', '\x10E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\x39', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', ':', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x66', '\n', '\b', 
		'\f', '\b', '\xE', '\b', 'i', '\v', '\b', '\x5', '\b', 'k', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 'u', '\n', '\n', '\f', '\n', 
		'\xE', '\n', 'x', '\v', '\n', '\x5', '\n', 'z', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x9C', '\n', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xC7', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\xD5', '\n', '\xF', '\x3', '\x10', 
		'\a', '\x10', '\xD8', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xDB', 
		'\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x2', '\x2', '\x1B', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x2', '\x6', 
		'\x3', '\x2', '\"', '%', '\x3', '\x2', '&', '\'', '\x3', '\x2', '\x31', 
		'\x38', '\x3', '\x2', '\x3', '\x4', '\x2', '\x111', '\x2', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '<', '\x3', '\x2', '\x2', '\x2', '\x6', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'Q', '\x3', '\x2', '\x2', '\x2', '\f', '[', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'j', '\x3', '\x2', '\x2', '\x2', '\x10', 'l', '\x3', '\x2', 
		'\x2', '\x2', '\x12', 'y', '\x3', '\x2', '\x2', '\x2', '\x14', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xC8', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xDC', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '$', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xEF', '\x3', '\x2', '\x2', '\x2', '(', '\xF7', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xFA', '\x3', '\x2', '\x2', '\x2', ',', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x103', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x32', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x39', '\x5', '\x4', '\x3', '\x2', '\x35', '\x39', '\x5', 
		'\b', '\x5', '\x2', '\x36', '\x39', '\x5', '\n', '\x6', '\x2', '\x37', 
		'\x39', '\x5', '.', '\x18', '\x2', '\x38', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', 
		':', ';', '\x3', '\x2', '\x2', '\x2', ';', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\x5', '\x30', '\x19', '\x2', '=', '>', '\a', ';', '\x2', 
		'\x2', '>', '?', '\x5', '\x6', '\x4', '\x2', '?', '@', '\a', '\x10', '\x2', 
		'\x2', '@', '\x41', '\b', '\x3', '\x1', '\x2', '\x41', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x43', '\a', '(', '\x2', '\x2', '\x43', '\x44', 
		'\x5', '\x14', '\v', '\x2', '\x44', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x46', '\a', ')', '\x2', '\x2', '\x46', 'G', '\a', ';', '\x2', 
		'\x2', 'G', 'H', '\a', '\a', '\x2', '\x2', 'H', 'I', '\x5', '\xE', '\b', 
		'\x2', 'I', 'J', '\a', '\x6', '\x2', '\x2', 'J', 'K', '\a', '\x11', '\x2', 
		'\x2', 'K', 'L', '\x5', '\x30', '\x19', '\x2', 'L', 'M', '\a', '\v', '\x2', 
		'\x2', 'M', 'N', '\x5', '\x1E', '\x10', '\x2', 'N', 'O', '\a', '\n', '\x2', 
		'\x2', 'O', 'P', '\b', '\x5', '\x1', '\x2', 'P', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\a', '*', '\x2', '\x2', 'R', 'S', '\a', ';', '\x2', 
		'\x2', 'S', 'T', '\a', '\a', '\x2', '\x2', 'T', 'U', '\x5', '\xE', '\b', 
		'\x2', 'U', 'V', '\a', '\x6', '\x2', '\x2', 'V', 'W', '\a', '\v', '\x2', 
		'\x2', 'W', 'X', '\x5', '\x1E', '\x10', '\x2', 'X', 'Y', '\a', '\n', '\x2', 
		'\x2', 'Y', 'Z', '\b', '\x6', '\x1', '\x2', 'Z', '\v', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\x5', '\x30', '\x19', '\x2', '\\', ']', '\a', ';', 
		'\x2', '\x2', ']', '^', '\b', '\a', '\x1', '\x2', '^', '\r', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\x5', '\f', '\a', '\x2', '`', 'g', '\b', '\b', 
		'\x1', '\x2', '\x61', '\x62', '\a', '\xF', '\x2', '\x2', '\x62', '\x63', 
		'\x5', '\f', '\a', '\x2', '\x63', '\x64', '\b', '\b', '\x1', '\x2', '\x64', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x65', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', '_', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\x5', '\x14', '\v', '\x2', 'm', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x5', '\x10', '\t', '\x2', 'o', 
		'v', '\b', '\n', '\x1', '\x2', 'p', 'q', '\a', '\xF', '\x2', '\x2', 'q', 
		'r', '\x5', '\x10', '\t', '\x2', 'r', 's', '\b', '\n', '\x1', '\x2', 's', 
		'u', '\x3', '\x2', '\x2', '\x2', 't', 'p', '\x3', '\x2', '\x2', '\x2', 
		'u', 'x', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x3', '\x2', '\x2', '\x2', 
		'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', 'n', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\a', ';', '\x2', '\x2', '|', '}', '\a', '\a', '\x2', 
		'\x2', '}', '~', '\x5', '\x12', '\n', '\x2', '~', '\x7F', '\a', '\x6', 
		'\x2', '\x2', '\x7F', '\x80', '\x5', '\x16', '\f', '\x2', '\x80', '\x81', 
		'\b', '\v', '\x1', '\x2', '\x81', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\a', '\x13', '\x2', '\x2', '\x83', '\x84', '\x5', '\x14', 
		'\v', '\x2', '\x84', '\x85', '\x5', '\x16', '\f', '\x2', '\x85', '\x86', 
		'\b', '\v', '\x1', '\x2', '\x86', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x88', '\a', '\x1A', '\x2', '\x2', '\x88', '\x89', '\x5', '\x14', 
		'\v', '\x2', '\x89', '\x8A', '\x5', '\x16', '\f', '\x2', '\x8A', '\x8B', 
		'\b', '\v', '\x1', '\x2', '\x8B', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8D', '\a', '\a', '\x2', '\x2', '\x8D', '\x8E', '\x5', '\x14', 
		'\v', '\x2', '\x8E', '\x8F', '\a', '\x6', '\x2', '\x2', '\x8F', '\x90', 
		'\x5', '\x16', '\f', '\x2', '\x90', '\x91', '\b', '\v', '\x1', '\x2', 
		'\x91', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\x5', 
		'\x2', '\x2', '\x93', '\x94', '\x5', '\x16', '\f', '\x2', '\x94', '\x95', 
		'\b', '\v', '\x1', '\x2', '\x95', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x97', '\a', ';', '\x2', '\x2', '\x97', '\x98', '\b', '\v', '\x1', 
		'\x2', '\x98', '\x99', '\x5', '\x16', '\f', '\x2', '\x99', '\x9A', '\b', 
		'\v', '\x1', '\x2', '\x9A', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x87', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x92', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9E', '\a', '\x15', '\x2', '\x2', '\x9E', '\x9F', '\x5', 
		'\x14', '\v', '\x2', '\x9F', '\xA0', '\x5', '\x16', '\f', '\x2', '\xA0', 
		'\xA1', '\b', '\f', '\x1', '\x2', '\xA1', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA3', '\a', '\x14', '\x2', '\x2', '\xA3', '\xA4', '\x5', 
		'\x14', '\v', '\x2', '\xA4', '\xA5', '\x5', '\x16', '\f', '\x2', '\xA5', 
		'\xA6', '\b', '\f', '\x1', '\x2', '\xA6', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA8', '\a', '\x13', '\x2', '\x2', '\xA8', '\xA9', '\x5', 
		'\x14', '\v', '\x2', '\xA9', '\xAA', '\x5', '\x16', '\f', '\x2', '\xAA', 
		'\xAB', '\b', '\f', '\x1', '\x2', '\xAB', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\a', '\x12', '\x2', '\x2', '\xAD', '\xAE', '\x5', 
		'\x14', '\v', '\x2', '\xAE', '\xAF', '\x5', '\x16', '\f', '\x2', '\xAF', 
		'\xB0', '\b', '\f', '\x1', '\x2', '\xB0', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\x5', '\x18', '\r', '\x2', '\xB2', '\xB3', '\x5', 
		'\x14', '\v', '\x2', '\xB3', '\xB4', '\x5', '\x16', '\f', '\x2', '\xB4', 
		'\xB5', '\b', '\f', '\x1', '\x2', '\xB5', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\x5', '\x1A', '\xE', '\x2', '\xB7', '\xB8', '\x5', 
		'\x14', '\v', '\x2', '\xB8', '\xB9', '\x5', '\x16', '\f', '\x2', '\xB9', 
		'\xBA', '\b', '\f', '\x1', '\x2', '\xBA', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\a', '\x18', '\x2', '\x2', '\xBC', '\xBD', '\x5', 
		'\x14', '\v', '\x2', '\xBD', '\xBE', '\x5', '\x16', '\f', '\x2', '\xBE', 
		'\xBF', '\b', '\f', '\x1', '\x2', '\xBF', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC1', '\a', '\x19', '\x2', '\x2', '\xC1', '\xC2', '\x5', 
		'\x14', '\v', '\x2', '\xC2', '\xC3', '\x5', '\x16', '\f', '\x2', '\xC3', 
		'\xC4', '\b', '\f', '\x1', '\x2', '\xC4', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xC7', '\b', '\f', '\x1', '\x2', '\xC6', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\x17', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\t', 
		'\x2', '\x2', '\x2', '\xC9', '\x19', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCB', '\t', '\x3', '\x2', '\x2', '\xCB', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xD5', '\x5', '\"', '\x12', '\x2', '\xCD', '\xD5', '\x5', 
		'(', '\x15', '\x2', '\xCE', '\xD5', '\x5', '*', '\x16', '\x2', '\xCF', 
		'\xD5', '\x5', '$', '\x13', '\x2', '\xD0', '\xD5', '\x5', '&', '\x14', 
		'\x2', '\xD1', '\xD5', '\x5', ',', '\x17', '\x2', '\xD2', '\xD5', '\x5', 
		' ', '\x11', '\x2', '\xD3', '\xD5', '\x5', '.', '\x18', '\x2', '\xD4', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD8', '\x5', '\x1C', '\xF', '\x2', '\xD7', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\a', ';', '\x2', 
		'\x2', '\xDD', '\xDE', '\a', '\a', '\x2', '\x2', '\xDE', '\xDF', '\x5', 
		'\x12', '\n', '\x2', '\xDF', '\xE0', '\a', '\x6', '\x2', '\x2', '\xE0', 
		'\xE1', '\a', '\x10', '\x2', '\x2', '\xE1', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE3', '\a', ';', '\x2', '\x2', '\xE3', '\xE4', '\a', 
		'(', '\x2', '\x2', '\xE4', '\xE5', '\x5', '\x14', '\v', '\x2', '\xE5', 
		'\xE6', '\a', '\x10', '\x2', '\x2', '\xE6', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xE8', '\a', '-', '\x2', '\x2', '\xE8', '\xE9', '\a', 
		'\a', '\x2', '\x2', '\xE9', '\xEA', '\x5', '\x14', '\v', '\x2', '\xEA', 
		'\xEB', '\a', '\x6', '\x2', '\x2', '\xEB', '\xEC', '\a', '\v', '\x2', 
		'\x2', '\xEC', '\xED', '\x5', '\x1E', '\x10', '\x2', '\xED', '\xEE', '\a', 
		'\n', '\x2', '\x2', '\xEE', '%', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', 
		'\a', '.', '\x2', '\x2', '\xF0', '\xF1', '\a', '\a', '\x2', '\x2', '\xF1', 
		'\xF2', '\x5', '\x14', '\v', '\x2', '\xF2', '\xF3', '\a', '\x6', '\x2', 
		'\x2', '\xF3', '\xF4', '\a', '\v', '\x2', '\x2', '\xF4', '\xF5', '\x5', 
		'\x1E', '\x10', '\x2', '\xF5', '\xF6', '\a', '\n', '\x2', '\x2', '\xF6', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\a', '+', '\x2', '\x2', 
		'\xF8', '\xF9', '\a', '\x10', '\x2', '\x2', '\xF9', ')', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xFB', '\a', ',', '\x2', '\x2', '\xFB', '\xFC', 
		'\x5', '\x14', '\v', '\x2', '\xFC', '\xFD', '\a', '\x10', '\x2', '\x2', 
		'\xFD', '+', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x5', '\x30', 
		'\x19', '\x2', '\xFF', '\x100', '\a', ';', '\x2', '\x2', '\x100', '\x101', 
		'\x5', '\x6', '\x4', '\x2', '\x101', '\x102', '\a', '\x10', '\x2', '\x2', 
		'\x102', '-', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x5', '\x32', 
		'\x1A', '\x2', '\x104', '\x105', '\a', '\x10', '\x2', '\x2', '\x105', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\t', '\x4', '\x2', 
		'\x2', '\x107', '\x31', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', 
		'\a', '\x11', '\x2', '\x2', '\x109', '\x10A', '\t', '\x5', '\x2', '\x2', 
		'\x10A', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x5', 
		'\x14', '\v', '\x2', '\x10C', '\x33', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x38', ':', 'g', 'j', 'v', 'y', '\x9B', '\xC6', '\xD4', '\xD9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Geem.Parser
