//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/mahmoud/Documents/GeemProgrammingLanguage/Geem/Parser/Geem.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Geem.Parser {

 using Geem.Infrastructure;	

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GeemParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, LP=13, RP=14, LSB=15, RSB=16, LCB=17, RCB=18, 
		ADDRESS_OF_OPERATOR=19, VALUE_INSIDE_OPERATOR=20, SIZE_OF=21, FASLA=22, 
		FASLA_MANQUOTA=23, COLON=24, PLUS=25, MINUS=26, MULTIPLY=27, DIVIDE=28, 
		ARABIC_MODULS=29, MODULUS=30, LAND=31, LOR=32, LNOT=33, SL_SYM=34, SRA_SYM=35, 
		SR_SYM=36, BAND_SYM=37, BOR_SYM=38, BXOR_SYM=39, BNOT_SYM=40, LTE_SYM=41, 
		GTE_SYM=42, LT_SYM=43, GT_SYM=44, EQUAL_SYM=45, NOTEQ_SYM=46, ASSIGN_SYM=47, 
		FUNC_KEYWORD=48, OP_KEYWORD=49, RET_KEYWORD=50, RES_KEYWORD=51, IF_KEYWORD=52, 
		WHILE_KEYWORD=53, TRUE_KEYWORD=54, FALSE_KEYWORD=55, BREAK_KEYWORD=56, 
		CONTINUE_KEYWORRD=57, INT_DATA_TYPE=58, UINT_DATA_TYPE=59, BYTE_DATA_TYPE=60, 
		UBYTE_DATA_TYPE=61, SHORT_DATA_TYPE=62, USHORT_DATA_TYPE=63, LONG_DATA_TYPE=64, 
		ULONG_DATA_TYPE=65, BOOL_DATA_TYPE=66, WHITE_SPACE=67, ID=68;
	public const int
		RULE_program = 0, RULE_globalVarDecl = 1, RULE_inititalization = 2, RULE_functionDecl = 3, 
		RULE_operationDecl = 4, RULE_parameter = 5, RULE_paramList = 6, RULE_argument = 7, 
		RULE_argumentList = 8, RULE_expression = 9, RULE_boolean_literal = 10, 
		RULE_comparison_op = 11, RULE_statement = 12, RULE_statementList = 13, 
		RULE_operationStat = 14, RULE_assignmentStat = 15, RULE_ifStat = 16, RULE_whileStat = 17, 
		RULE_returnStat = 18, RULE_resultStat = 19, RULE_breakStat = 20, RULE_continueStat = 21, 
		RULE_varDecl = 22, RULE_commandStat = 23, RULE_command = 24, RULE_datatype = 25, 
		RULE_int_literal = 26;
	public static readonly string[] ruleNames = {
		"program", "globalVarDecl", "inititalization", "functionDecl", "operationDecl", 
		"parameter", "paramList", "argument", "argumentList", "expression", "boolean_literal", 
		"comparison_op", "statement", "statementList", "operationStat", "assignmentStat", 
		"ifStat", "whileStat", "returnStat", "resultStat", "breakStat", "continueStat", 
		"varDecl", "commandStat", "command", "datatype", "int_literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u0625\u0637\u0628\u0639'", "'\u0627\u0637\u0628\u0639'", "'\u0660'", 
		"'\u0661'", "'\u0662'", "'\u0663'", "'\u0664'", "'\u0665'", "'\u0666'", 
		"'\u0667'", "'\u0668'", "'\u0669'", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "'&:'", "'*:'", "'\u062D\u062C\u0645:'", "'\u060C'", "'\u061B'", 
		"':'", "'+'", "'-'", "'\u00D7'", "'\u00F7'", "'\u066A'", "'%'", "'&&'", 
		"'||'", "'!'", "'<<'", "'>>>'", "'>>'", "'&'", "'|'", "'^'", "'~'", "'<='", 
		"'>='", "'<'", "'>'", "'=='", "'!='", "'='", "'\u062F\u0627\u0644\u0629'", 
		"'\u0639\u0645\u0644\u064A\u0629'", "'\u0631\u062C\u0648\u0639'", "'\u0627\u0644\u0646\u0627\u062A\u062C'", 
		null, "'\u0637\u0627\u0644\u0645\u0627'", "'\u0635\u0648\u0627\u0628'", 
		null, "'\u0642\u0637\u0639'", null, "'\u0635_\u0664'", "'\u0637_\u0664'", 
		"'\u0635_\u0661'", "'\u0637_\u0661'", "'\u0635_\u0662'", "'\u0637_\u0662'", 
		"'\u0635_\u0668'", "'\u0637_\u0668'", "'\u0645\u0646\u0637\u0642\u064A'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "LP", "RP", "LSB", "RSB", "LCB", "RCB", "ADDRESS_OF_OPERATOR", "VALUE_INSIDE_OPERATOR", 
		"SIZE_OF", "FASLA", "FASLA_MANQUOTA", "COLON", "PLUS", "MINUS", "MULTIPLY", 
		"DIVIDE", "ARABIC_MODULS", "MODULUS", "LAND", "LOR", "LNOT", "SL_SYM", 
		"SRA_SYM", "SR_SYM", "BAND_SYM", "BOR_SYM", "BXOR_SYM", "BNOT_SYM", "LTE_SYM", 
		"GTE_SYM", "LT_SYM", "GT_SYM", "EQUAL_SYM", "NOTEQ_SYM", "ASSIGN_SYM", 
		"FUNC_KEYWORD", "OP_KEYWORD", "RET_KEYWORD", "RES_KEYWORD", "IF_KEYWORD", 
		"WHILE_KEYWORD", "TRUE_KEYWORD", "FALSE_KEYWORD", "BREAK_KEYWORD", "CONTINUE_KEYWORRD", 
		"INT_DATA_TYPE", "UINT_DATA_TYPE", "BYTE_DATA_TYPE", "UBYTE_DATA_TYPE", 
		"SHORT_DATA_TYPE", "USHORT_DATA_TYPE", "LONG_DATA_TYPE", "ULONG_DATA_TYPE", 
		"BOOL_DATA_TYPE", "WHITE_SPACE", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Geem.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GeemParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GeemParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GeemParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclContext[] globalVarDecl() {
			return GetRuleContexts<GlobalVarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclContext globalVarDecl(int i) {
			return GetRuleContext<GlobalVarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationDeclContext[] operationDecl() {
			return GetRuleContexts<OperationDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationDeclContext operationDecl(int i) {
			return GetRuleContext<OperationDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatContext[] commandStat() {
			return GetRuleContexts<CommandStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatContext commandStat(int i) {
			return GetRuleContext<CommandStatContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 58;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT_DATA_TYPE:
				case UINT_DATA_TYPE:
				case BYTE_DATA_TYPE:
				case UBYTE_DATA_TYPE:
				case SHORT_DATA_TYPE:
				case USHORT_DATA_TYPE:
				case LONG_DATA_TYPE:
				case ULONG_DATA_TYPE:
				case BOOL_DATA_TYPE:
					{
					State = 54;
					globalVarDecl();
					}
					break;
				case FUNC_KEYWORD:
					{
					State = 55;
					functionDecl();
					}
					break;
				case OP_KEYWORD:
					{
					State = 56;
					operationDecl();
					}
					break;
				case COLON:
					{
					State = 57;
					commandStat();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (COLON - 24)) | (1L << (FUNC_KEYWORD - 24)) | (1L << (OP_KEYWORD - 24)) | (1L << (INT_DATA_TYPE - 24)) | (1L << (UINT_DATA_TYPE - 24)) | (1L << (BYTE_DATA_TYPE - 24)) | (1L << (UBYTE_DATA_TYPE - 24)) | (1L << (SHORT_DATA_TYPE - 24)) | (1L << (USHORT_DATA_TYPE - 24)) | (1L << (LONG_DATA_TYPE - 24)) | (1L << (ULONG_DATA_TYPE - 24)) | (1L << (BOOL_DATA_TYPE - 24)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InititalizationContext inititalization() {
			return GetRuleContext<InititalizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public GlobalVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarDeclContext globalVarDecl() {
		GlobalVarDeclContext _localctx = new GlobalVarDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			datatype();
			State = 63;
			Match(ID);
			State = 64;
			inititalization();
			State = 65;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InititalizationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_SYM() { return GetToken(GeemParser.ASSIGN_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InititalizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inititalization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInititalization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InititalizationContext inititalization() {
		InititalizationContext _localctx = new InititalizationContext(Context, State);
		EnterRule(_localctx, 4, RULE_inititalization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 67;
			Match(ASSIGN_SYM);
			State = 68;
			expression(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_KEYWORD() { return GetToken(GeemParser.FUNC_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GeemParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(GeemParser.RCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(GeemParser.LCB, 0); }
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(FUNC_KEYWORD);
			State = 71;
			Match(ID);
			State = 72;
			Match(RP);
			State = 73;
			paramList();
			State = 74;
			Match(LP);
			State = 75;
			Match(COLON);
			State = 76;
			datatype();
			State = 77;
			Match(RCB);
			State = 78;
			statementList();
			State = 79;
			Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_KEYWORD() { return GetToken(GeemParser.OP_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(GeemParser.RCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(GeemParser.LCB, 0); }
		public OperationDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationDeclContext operationDecl() {
		OperationDeclContext _localctx = new OperationDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_operationDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(OP_KEYWORD);
			State = 82;
			Match(ID);
			State = 83;
			Match(RP);
			State = 84;
			paramList();
			State = 85;
			Match(LP);
			State = 86;
			Match(RCB);
			State = 87;
			statementList();
			State = 88;
			Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			datatype();
			State = 91;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FASLA() { return GetTokens(GeemParser.FASLA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA(int i) {
			return GetToken(GeemParser.FASLA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 12, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (INT_DATA_TYPE - 58)) | (1L << (UINT_DATA_TYPE - 58)) | (1L << (BYTE_DATA_TYPE - 58)) | (1L << (UBYTE_DATA_TYPE - 58)) | (1L << (SHORT_DATA_TYPE - 58)) | (1L << (USHORT_DATA_TYPE - 58)) | (1L << (LONG_DATA_TYPE - 58)) | (1L << (ULONG_DATA_TYPE - 58)) | (1L << (BOOL_DATA_TYPE - 58)))) != 0)) {
				{
				State = 93;
				parameter();
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FASLA) {
					{
					{
					State = 94;
					Match(FASLA);
					State = 95;
					parameter();
					}
					}
					State = 100;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 14, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FASLA() { return GetTokens(GeemParser.FASLA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA(int i) {
			return GetToken(GeemParser.FASLA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 16, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << RP) | (1L << MINUS) | (1L << LNOT) | (1L << TRUE_KEYWORD) | (1L << FALSE_KEYWORD))) != 0) || _la==ID) {
				{
				State = 105;
				argument();
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FASLA) {
					{
					{
					State = 106;
					Match(FASLA);
					State = 107;
					argument();
					}
					}
					State = 112;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public SymbolTable st;
		public string expression_datatype;
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
			this.st = context.st;
			this.expression_datatype = context.expression_datatype;
		}
	}
	public partial class Lor_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOR() { return GetToken(GeemParser.LOR, 0); }
		public Lor_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLor_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Add_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GeemParser.PLUS, 0); }
		public Add_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Land_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAND() { return GetToken(GeemParser.LAND, 0); }
		public Land_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLand_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Boolean_literal_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public Boolean_literal_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_literal_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Comparison_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_opContext comparison_op() {
			return GetRuleContext<Comparison_opContext>(0);
		}
		public Comparison_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Multiply_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(GeemParser.MULTIPLY, 0); }
		public Multiply_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiply_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Variable_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		public Variable_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Parenthesis_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		public Parenthesis_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Int_literal_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_literalContext int_literal() {
			return GetRuleContext<Int_literalContext>(0);
		}
		public Int_literal_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_literal_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Subtraction_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GeemParser.MINUS, 0); }
		public Subtraction_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Divide_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(GeemParser.DIVIDE, 0); }
		public Divide_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivide_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Fun_call_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		public Fun_call_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFun_call_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Minus_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GeemParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		public Minus_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinus_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lnot_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LNOT() { return GetToken(GeemParser.LNOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Lnot_exprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLnot_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new Fun_call_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 116;
				Match(ID);
				State = 117;
				Match(RP);
				State = 118;
				argumentList();
				State = 119;
				Match(LP);
				}
				break;
			case 2:
				{
				_localctx = new Minus_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 121;
				Match(MINUS);
				State = 122;
				Match(RP);
				State = 123;
				expression(0);
				State = 124;
				Match(LP);
				}
				break;
			case 3:
				{
				_localctx = new Lnot_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 126;
				Match(LNOT);
				State = 127;
				expression(12);
				}
				break;
			case 4:
				{
				_localctx = new Parenthesis_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 128;
				Match(RP);
				State = 129;
				expression(0);
				State = 130;
				Match(LP);
				}
				break;
			case 5:
				{
				_localctx = new Int_literal_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 132;
				int_literal();
				}
				break;
			case 6:
				{
				_localctx = new Boolean_literal_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 133;
				boolean_literal();
				}
				break;
			case 7:
				{
				_localctx = new Variable_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 134;
				Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 159;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new Divide_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 137;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 138;
						Match(DIVIDE);
						State = 139;
						expression(12);
						}
						break;
					case 2:
						{
						_localctx = new Multiply_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 140;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 141;
						Match(MULTIPLY);
						State = 142;
						expression(11);
						}
						break;
					case 3:
						{
						_localctx = new Subtraction_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 143;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 144;
						Match(MINUS);
						State = 145;
						expression(10);
						}
						break;
					case 4:
						{
						_localctx = new Add_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 146;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 147;
						Match(PLUS);
						State = 148;
						expression(9);
						}
						break;
					case 5:
						{
						_localctx = new Comparison_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 149;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 150;
						comparison_op();
						State = 151;
						expression(8);
						}
						break;
					case 6:
						{
						_localctx = new Land_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 153;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 154;
						Match(LAND);
						State = 155;
						expression(7);
						}
						break;
					case 7:
						{
						_localctx = new Lor_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 156;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 157;
						Match(LOR);
						State = 158;
						expression(6);
						}
						break;
					}
					} 
				}
				State = 163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		public bool value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_KEYWORD() { return GetToken(GeemParser.TRUE_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_KEYWORD() { return GetToken(GeemParser.FALSE_KEYWORD, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 20, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE_KEYWORD || _la==FALSE_KEYWORD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE_SYM() { return GetToken(GeemParser.GTE_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE_SYM() { return GetToken(GeemParser.LTE_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_SYM() { return GetToken(GeemParser.GT_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_SYM() { return GetToken(GeemParser.LT_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYM() { return GetToken(GeemParser.EQUAL_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQ_SYM() { return GetToken(GeemParser.NOTEQ_SYM, 0); }
		public Comparison_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_opContext comparison_op() {
		Comparison_opContext _localctx = new Comparison_opContext(Context, State);
		EnterRule(_localctx, 22, RULE_comparison_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTE_SYM) | (1L << GTE_SYM) | (1L << LT_SYM) | (1L << GT_SYM) | (1L << EQUAL_SYM) | (1L << NOTEQ_SYM))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SymbolTable st;
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
			this.st = context.st;
		}
	}
	public partial class Command_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatContext commandStat() {
			return GetRuleContext<CommandStatContext>(0);
		}
		public Command_StatContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Break_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatContext breakStat() {
			return GetRuleContext<BreakStatContext>(0);
		}
		public Break_StatContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Var_Decl_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public Var_Decl_StatContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_Decl_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class If_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		public If_StatContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Return_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatContext returnStat() {
			return GetRuleContext<ReturnStatContext>(0);
		}
		public Return_StatContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Continue_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatContext continueStat() {
			return GetRuleContext<ContinueStatContext>(0);
		}
		public Continue_StatContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class While_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatContext whileStat() {
			return GetRuleContext<WhileStatContext>(0);
		}
		public While_StatContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Result_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResultStatContext resultStat() {
			return GetRuleContext<ResultStatContext>(0);
		}
		public Result_StatContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Operation_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationStatContext operationStat() {
			return GetRuleContext<OperationStatContext>(0);
		}
		public Operation_StatContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Assignment_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatContext assignmentStat() {
			return GetRuleContext<AssignmentStatContext>(0);
		}
		public Assignment_StatContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_Stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new Assignment_StatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				assignmentStat();
				}
				break;
			case 2:
				_localctx = new Return_StatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				returnStat();
				}
				break;
			case 3:
				_localctx = new Result_StatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 170;
				resultStat();
				}
				break;
			case 4:
				_localctx = new Break_StatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 171;
				breakStat();
				}
				break;
			case 5:
				_localctx = new Continue_StatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 172;
				continueStat();
				}
				break;
			case 6:
				_localctx = new If_StatContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 173;
				ifStat();
				}
				break;
			case 7:
				_localctx = new While_StatContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 174;
				whileStat();
				}
				break;
			case 8:
				_localctx = new Var_Decl_StatContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 175;
				varDecl();
				}
				break;
			case 9:
				_localctx = new Operation_StatContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 176;
				operationStat();
				}
				break;
			case 10:
				_localctx = new Command_StatContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 177;
				commandStat();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 26, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (COLON - 24)) | (1L << (RET_KEYWORD - 24)) | (1L << (RES_KEYWORD - 24)) | (1L << (IF_KEYWORD - 24)) | (1L << (WHILE_KEYWORD - 24)) | (1L << (BREAK_KEYWORD - 24)) | (1L << (CONTINUE_KEYWORRD - 24)) | (1L << (INT_DATA_TYPE - 24)) | (1L << (UINT_DATA_TYPE - 24)) | (1L << (BYTE_DATA_TYPE - 24)) | (1L << (UBYTE_DATA_TYPE - 24)) | (1L << (SHORT_DATA_TYPE - 24)) | (1L << (USHORT_DATA_TYPE - 24)) | (1L << (LONG_DATA_TYPE - 24)) | (1L << (ULONG_DATA_TYPE - 24)) | (1L << (BOOL_DATA_TYPE - 24)) | (1L << (ID - 24)))) != 0)) {
				{
				{
				State = 180;
				statement();
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public OperationStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationStatContext operationStat() {
		OperationStatContext _localctx = new OperationStatContext(Context, State);
		EnterRule(_localctx, 28, RULE_operationStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(ID);
			State = 187;
			Match(RP);
			State = 188;
			argumentList();
			State = 189;
			Match(LP);
			State = 190;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_SYM() { return GetToken(GeemParser.ASSIGN_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public AssignmentStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatContext assignmentStat() {
		AssignmentStatContext _localctx = new AssignmentStatContext(Context, State);
		EnterRule(_localctx, 30, RULE_assignmentStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(ID);
			State = 193;
			Match(ASSIGN_SYM);
			State = 194;
			expression(0);
			State = 195;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_KEYWORD() { return GetToken(GeemParser.IF_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(GeemParser.RCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(GeemParser.LCB, 0); }
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(IF_KEYWORD);
			State = 198;
			Match(RP);
			State = 199;
			expression(0);
			State = 200;
			Match(LP);
			State = 201;
			Match(RCB);
			State = 202;
			statementList();
			State = 203;
			Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_KEYWORD() { return GetToken(GeemParser.WHILE_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(GeemParser.RCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(GeemParser.LCB, 0); }
		public WhileStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatContext whileStat() {
		WhileStatContext _localctx = new WhileStatContext(Context, State);
		EnterRule(_localctx, 34, RULE_whileStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(WHILE_KEYWORD);
			State = 206;
			Match(RP);
			State = 207;
			expression(0);
			State = 208;
			Match(LP);
			State = 209;
			Match(RCB);
			State = 210;
			statementList();
			State = 211;
			Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RET_KEYWORD() { return GetToken(GeemParser.RET_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public ReturnStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatContext returnStat() {
		ReturnStatContext _localctx = new ReturnStatContext(Context, State);
		EnterRule(_localctx, 36, RULE_returnStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(RET_KEYWORD);
			State = 214;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RES_KEYWORD() { return GetToken(GeemParser.RES_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public ResultStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResultStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultStatContext resultStat() {
		ResultStatContext _localctx = new ResultStatContext(Context, State);
		EnterRule(_localctx, 38, RULE_resultStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(RES_KEYWORD);
			State = 217;
			expression(0);
			State = 218;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK_KEYWORD() { return GetToken(GeemParser.BREAK_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public BreakStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatContext breakStat() {
		BreakStatContext _localctx = new BreakStatContext(Context, State);
		EnterRule(_localctx, 40, RULE_breakStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(BREAK_KEYWORD);
			State = 221;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_KEYWORRD() { return GetToken(GeemParser.CONTINUE_KEYWORRD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public ContinueStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatContext continueStat() {
		ContinueStatContext _localctx = new ContinueStatContext(Context, State);
		EnterRule(_localctx, 42, RULE_continueStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(CONTINUE_KEYWORRD);
			State = 224;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InititalizationContext inititalization() {
			return GetRuleContext<InititalizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 44, RULE_varDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			datatype();
			State = 227;
			Match(ID);
			State = 228;
			inititalization();
			State = 229;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public CommandStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandStatContext commandStat() {
		CommandStatContext _localctx = new CommandStatContext(Context, State);
		EnterRule(_localctx, 46, RULE_commandStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			command();
			State = 232;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GeemParser.COLON, 0); }
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 48, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 234;
			Match(COLON);
			State = 235;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
			State = 237;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_DATA_TYPE() { return GetToken(GeemParser.INT_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT_DATA_TYPE() { return GetToken(GeemParser.UINT_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_DATA_TYPE() { return GetToken(GeemParser.BYTE_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBYTE_DATA_TYPE() { return GetToken(GeemParser.UBYTE_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT_DATA_TYPE() { return GetToken(GeemParser.SHORT_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USHORT_DATA_TYPE() { return GetToken(GeemParser.USHORT_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_DATA_TYPE() { return GetToken(GeemParser.LONG_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONG_DATA_TYPE() { return GetToken(GeemParser.ULONG_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_DATA_TYPE() { return GetToken(GeemParser.BOOL_DATA_TYPE, 0); }
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_datatype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (INT_DATA_TYPE - 58)) | (1L << (UINT_DATA_TYPE - 58)) | (1L << (BYTE_DATA_TYPE - 58)) | (1L << (UBYTE_DATA_TYPE - 58)) | (1L << (SHORT_DATA_TYPE - 58)) | (1L << (USHORT_DATA_TYPE - 58)) | (1L << (LONG_DATA_TYPE - 58)) | (1L << (ULONG_DATA_TYPE - 58)) | (1L << (BOOL_DATA_TYPE - 58)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_literalContext : ParserRuleContext {
		public Object value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(GeemParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(GeemParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GeemParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GeemParser.PLUS, 0); }
		public Int_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGeemVisitor<TResult> typedVisitor = visitor as IGeemVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_literalContext int_literal() {
		Int_literalContext _localctx = new Int_literalContext(Context, State);
		EnterRule(_localctx, 52, RULE_int_literal);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 241;
				Match(MINUS);
				}
			}

			State = 245;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 244;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 249;
				Match(COLON);
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 250;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 253;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__6) | (1L << T__10))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x46', '\x103', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '=', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', '>', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\a', '\b', '\x63', '\n', '\b', '\f', '\b', '\xE', '\b', '\x66', '\v', 
		'\b', '\x5', '\b', 'h', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', 'o', '\n', '\n', '\f', '\n', '\xE', 
		'\n', 'r', '\v', '\n', '\x5', '\n', 't', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\x8A', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\xA2', '\n', '\v', '\f', '\v', '\xE', '\v', '\xA5', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xB5', '\n', 
		'\xE', '\x3', '\xF', '\a', '\xF', '\xB8', '\n', '\xF', '\f', '\xF', '\xE', 
		'\xF', '\xBB', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x5', '\x1C', '\xF5', '\n', 
		'\x1C', '\x3', '\x1C', '\x6', '\x1C', '\xF8', '\n', '\x1C', '\r', '\x1C', 
		'\xE', '\x1C', '\xF9', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\xFE', 
		'\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x101', '\n', '\x1C', '\x3', 
		'\x1C', '\x2', '\x3', '\x14', '\x1D', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x2', '\t', '\x3', '\x2', '\x38', '\x39', '\x3', '\x2', '+', '\x30', 
		'\x3', '\x2', '\x3', '\x4', '\x3', '\x2', '<', '\x44', '\x3', '\x2', '\x5', 
		'\xE', '\x3', '\x2', '\x1B', '\x1C', '\x5', '\x2', '\x6', '\a', '\t', 
		'\t', '\r', '\r', '\x2', '\x10A', '\x2', '<', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '@', '\x3', '\x2', '\x2', '\x2', '\x6', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\b', 'H', '\x3', '\x2', '\x2', '\x2', '\n', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\\', '\x3', '\x2', '\x2', '\x2', '\xE', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'i', '\x3', '\x2', '\x2', '\x2', '\x12', 
		's', '\x3', '\x2', '\x2', '\x2', '\x14', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x18', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xB4', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\xC2', '\x3', '\x2', '\x2', '\x2', '\"', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xCF', '\x3', '\x2', '\x2', '\x2', '&', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xDA', '\x3', '\x2', '\x2', '\x2', '*', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xE1', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\x30', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\xEC', '\x3', '\x2', '\x2', '\x2', '\x34', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\xF4', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'=', '\x5', '\x4', '\x3', '\x2', '\x39', '=', '\x5', '\b', '\x5', '\x2', 
		':', '=', '\x5', '\n', '\x6', '\x2', ';', '=', '\x5', '\x30', '\x19', 
		'\x2', '<', '\x38', '\x3', '\x2', '\x2', '\x2', '<', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', ';', '\x3', '\x2', 
		'\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', 
		'\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x41', '\x5', '\x34', '\x1B', '\x2', '\x41', 
		'\x42', '\a', '\x46', '\x2', '\x2', '\x42', '\x43', '\x5', '\x6', '\x4', 
		'\x2', '\x43', '\x44', '\a', '\x19', '\x2', '\x2', '\x44', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\a', '\x31', '\x2', '\x2', '\x46', 
		'G', '\x5', '\x14', '\v', '\x2', 'G', '\a', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\a', '\x32', '\x2', '\x2', 'I', 'J', '\a', '\x46', '\x2', '\x2', 
		'J', 'K', '\a', '\x10', '\x2', '\x2', 'K', 'L', '\x5', '\xE', '\b', '\x2', 
		'L', 'M', '\a', '\xF', '\x2', '\x2', 'M', 'N', '\a', '\x1A', '\x2', '\x2', 
		'N', 'O', '\x5', '\x34', '\x1B', '\x2', 'O', 'P', '\a', '\x14', '\x2', 
		'\x2', 'P', 'Q', '\x5', '\x1C', '\xF', '\x2', 'Q', 'R', '\a', '\x13', 
		'\x2', '\x2', 'R', '\t', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\x33', 
		'\x2', '\x2', 'T', 'U', '\a', '\x46', '\x2', '\x2', 'U', 'V', '\a', '\x10', 
		'\x2', '\x2', 'V', 'W', '\x5', '\xE', '\b', '\x2', 'W', 'X', '\a', '\xF', 
		'\x2', '\x2', 'X', 'Y', '\a', '\x14', '\x2', '\x2', 'Y', 'Z', '\x5', '\x1C', 
		'\xF', '\x2', 'Z', '[', '\a', '\x13', '\x2', '\x2', '[', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\x5', '\x34', '\x1B', '\x2', ']', '^', 
		'\a', '\x46', '\x2', '\x2', '^', '\r', '\x3', '\x2', '\x2', '\x2', '_', 
		'\x64', '\x5', '\f', '\a', '\x2', '`', '\x61', '\a', '\x18', '\x2', '\x2', 
		'\x61', '\x63', '\x5', '\f', '\a', '\x2', '\x62', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x66', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'h', '\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', 
		'\x2', 'g', '_', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'h', '\xF', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x5', '\x14', 
		'\v', '\x2', 'j', '\x11', '\x3', '\x2', '\x2', '\x2', 'k', 'p', '\x5', 
		'\x10', '\t', '\x2', 'l', 'm', '\a', '\x18', '\x2', '\x2', 'm', 'o', '\x5', 
		'\x10', '\t', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', 
		'\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', 
		'\x2', '\x2', '\x2', 's', 'k', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', 
		'\x2', '\x2', '\x2', 't', '\x13', '\x3', '\x2', '\x2', '\x2', 'u', 'v', 
		'\b', '\v', '\x1', '\x2', 'v', 'w', '\a', '\x46', '\x2', '\x2', 'w', 'x', 
		'\a', '\x10', '\x2', '\x2', 'x', 'y', '\x5', '\x12', '\n', '\x2', 'y', 
		'z', '\a', '\xF', '\x2', '\x2', 'z', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'{', '|', '\a', '\x1C', '\x2', '\x2', '|', '}', '\a', '\x10', '\x2', '\x2', 
		'}', '~', '\x5', '\x14', '\v', '\x2', '~', '\x7F', '\a', '\xF', '\x2', 
		'\x2', '\x7F', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\a', 
		'#', '\x2', '\x2', '\x81', '\x8A', '\x5', '\x14', '\v', '\xE', '\x82', 
		'\x83', '\a', '\x10', '\x2', '\x2', '\x83', '\x84', '\x5', '\x14', '\v', 
		'\x2', '\x84', '\x85', '\a', '\xF', '\x2', '\x2', '\x85', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x8A', '\x5', '\x36', '\x1C', '\x2', '\x87', 
		'\x8A', '\x5', '\x16', '\f', '\x2', '\x88', '\x8A', '\a', '\x46', '\x2', 
		'\x2', '\x89', 'u', '\x3', '\x2', '\x2', '\x2', '\x89', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x80', '\x3', '\x2', '\x2', '\x2', '\x89', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x89', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', 
		'\f', '\r', '\x2', '\x2', '\x8C', '\x8D', '\a', '\x1E', '\x2', '\x2', 
		'\x8D', '\xA2', '\x5', '\x14', '\v', '\xE', '\x8E', '\x8F', '\f', '\f', 
		'\x2', '\x2', '\x8F', '\x90', '\a', '\x1D', '\x2', '\x2', '\x90', '\xA2', 
		'\x5', '\x14', '\v', '\r', '\x91', '\x92', '\f', '\v', '\x2', '\x2', '\x92', 
		'\x93', '\a', '\x1C', '\x2', '\x2', '\x93', '\xA2', '\x5', '\x14', '\v', 
		'\f', '\x94', '\x95', '\f', '\n', '\x2', '\x2', '\x95', '\x96', '\a', 
		'\x1B', '\x2', '\x2', '\x96', '\xA2', '\x5', '\x14', '\v', '\v', '\x97', 
		'\x98', '\f', '\t', '\x2', '\x2', '\x98', '\x99', '\x5', '\x18', '\r', 
		'\x2', '\x99', '\x9A', '\x5', '\x14', '\v', '\n', '\x9A', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9C', '\f', '\b', '\x2', '\x2', '\x9C', 
		'\x9D', '\a', '!', '\x2', '\x2', '\x9D', '\xA2', '\x5', '\x14', '\v', 
		'\t', '\x9E', '\x9F', '\f', '\a', '\x2', '\x2', '\x9F', '\xA0', '\a', 
		'\"', '\x2', '\x2', '\xA0', '\xA2', '\x5', '\x14', '\v', '\b', '\xA1', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\x91', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\x97', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\t', '\x2', '\x2', '\x2', '\xA7', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA9', '\t', '\x3', '\x2', '\x2', '\xA9', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xB5', '\x5', ' ', '\x11', 
		'\x2', '\xAB', '\xB5', '\x5', '&', '\x14', '\x2', '\xAC', '\xB5', '\x5', 
		'(', '\x15', '\x2', '\xAD', '\xB5', '\x5', '*', '\x16', '\x2', '\xAE', 
		'\xB5', '\x5', ',', '\x17', '\x2', '\xAF', '\xB5', '\x5', '\"', '\x12', 
		'\x2', '\xB0', '\xB5', '\x5', '$', '\x13', '\x2', '\xB1', '\xB5', '\x5', 
		'.', '\x18', '\x2', '\xB2', '\xB5', '\x5', '\x1E', '\x10', '\x2', '\xB3', 
		'\xB5', '\x5', '\x30', '\x19', '\x2', '\xB4', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB8', '\x5', '\x1A', '\xE', '\x2', '\xB7', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', '\x46', '\x2', '\x2', '\xBD', 
		'\xBE', '\a', '\x10', '\x2', '\x2', '\xBE', '\xBF', '\x5', '\x12', '\n', 
		'\x2', '\xBF', '\xC0', '\a', '\xF', '\x2', '\x2', '\xC0', '\xC1', '\a', 
		'\x19', '\x2', '\x2', '\xC1', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\a', '\x46', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x31', '\x2', 
		'\x2', '\xC4', '\xC5', '\x5', '\x14', '\v', '\x2', '\xC5', '\xC6', '\a', 
		'\x19', '\x2', '\x2', '\xC6', '!', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC8', '\a', '\x36', '\x2', '\x2', '\xC8', '\xC9', '\a', '\x10', '\x2', 
		'\x2', '\xC9', '\xCA', '\x5', '\x14', '\v', '\x2', '\xCA', '\xCB', '\a', 
		'\xF', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x14', '\x2', '\x2', '\xCC', 
		'\xCD', '\x5', '\x1C', '\xF', '\x2', '\xCD', '\xCE', '\a', '\x13', '\x2', 
		'\x2', '\xCE', '#', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\a', 
		'\x37', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x10', '\x2', '\x2', '\xD1', 
		'\xD2', '\x5', '\x14', '\v', '\x2', '\xD2', '\xD3', '\a', '\xF', '\x2', 
		'\x2', '\xD3', '\xD4', '\a', '\x14', '\x2', '\x2', '\xD4', '\xD5', '\x5', 
		'\x1C', '\xF', '\x2', '\xD5', '\xD6', '\a', '\x13', '\x2', '\x2', '\xD6', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\a', '\x34', '\x2', 
		'\x2', '\xD8', '\xD9', '\a', '\x19', '\x2', '\x2', '\xD9', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', '\x35', '\x2', '\x2', '\xDB', 
		'\xDC', '\x5', '\x14', '\v', '\x2', '\xDC', '\xDD', '\a', '\x19', '\x2', 
		'\x2', '\xDD', ')', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\a', 
		':', '\x2', '\x2', '\xDF', '\xE0', '\a', '\x19', '\x2', '\x2', '\xE0', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', ';', '\x2', '\x2', 
		'\xE2', '\xE3', '\a', '\x19', '\x2', '\x2', '\xE3', '-', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE5', '\x5', '\x34', '\x1B', '\x2', '\xE5', '\xE6', 
		'\a', '\x46', '\x2', '\x2', '\xE6', '\xE7', '\x5', '\x6', '\x4', '\x2', 
		'\xE7', '\xE8', '\a', '\x19', '\x2', '\x2', '\xE8', '/', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xEA', '\x5', '\x32', '\x1A', '\x2', '\xEA', '\xEB', 
		'\a', '\x19', '\x2', '\x2', '\xEB', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xED', '\a', '\x1A', '\x2', '\x2', '\xED', '\xEE', '\t', '\x4', 
		'\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', 
		'\x5', '\x14', '\v', '\x2', '\xF0', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xF2', '\t', '\x5', '\x2', '\x2', '\xF2', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xF5', '\a', '\x1C', '\x2', '\x2', '\xF4', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF8', '\t', '\x6', 
		'\x2', '\x2', '\xF7', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\x100', '\x3', '\x2', 
		'\x2', '\x2', '\xFB', '\xFD', '\a', '\x1A', '\x2', '\x2', '\xFC', '\xFE', 
		'\t', '\a', '\x2', '\x2', '\xFD', '\xFC', '\x3', '\x2', '\x2', '\x2', 
		'\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '\x101', '\t', '\b', '\x2', '\x2', '\x100', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x101', '\x37', '\x3', '\x2', '\x2', '\x2', '\x11', '<', '>', '\x64', 
		'g', 'p', 's', '\x89', '\xA1', '\xA3', '\xB4', '\xB9', '\xF4', '\xF9', 
		'\xFD', '\x100',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Geem.Parser
