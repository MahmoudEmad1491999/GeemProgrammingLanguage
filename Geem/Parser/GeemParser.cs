//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/mahmoud/Documents/GeemProgrammingLanguage/Geem/Parser/Geem.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Geem.Parser {

 using Geem.Infrastructure;	

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class GeemParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, LP=3, RP=4, LSB=5, RSB=6, LCB=7, RCB=8, ADDRESS_OF_OPERATOR=9, 
		VALUE_INSIDE_OPERATOR=10, SIZE_OF=11, FASLA=12, FASLA_MANQUOTA=13, COLON=14, 
		PLUS=15, MINUS=16, MULTIPLY=17, DIVIDE=18, ARABIC_MODULS=19, MODULUS=20, 
		LAND=21, LOR=22, LNOT=23, SL_SYM=24, SRA_SYM=25, SR_SYM=26, BAND_SYM=27, 
		BOR_SYM=28, BXOR_SYM=29, BNOT_SYM=30, LTE_SYM=31, GTE_SYM=32, LT_SYM=33, 
		GT_SYM=34, EQUAL_SYM=35, NOTEQ_SYM=36, ASSIGN_SYM=37, FUNC_KEYWORD=38, 
		OP_KEYWORD=39, RET_KEYWORD=40, RES_KEYWORD=41, IF_KEYWORD=42, WHILE_KEYWORD=43, 
		TRUE_KEYWORD=44, FALSE_KEYWORD=45, BREAK_KEYWORD=46, CONTINUE_KEYWORRD=47, 
		INT_DATA_TYPE=48, UINT_DATA_TYPE=49, BYTE_DATA_TYPE=50, UBYTE_DATA_TYPE=51, 
		SHORT_DATA_TYPE=52, USHORT_DATA_TYPE=53, LONG_DATA_TYPE=54, ULONG_DATA_TYPE=55, 
		BOOL_DATA_TYPE=56, WHITE_SPACE=57, ID=58, Int_literal=59;
	public const int
		RULE_program = 0, RULE_globalVarDecl = 1, RULE_inititalization = 2, RULE_functionDecl = 3, 
		RULE_operationDecl = 4, RULE_parameter = 5, RULE_paramList = 6, RULE_argument = 7, 
		RULE_argumentList = 8, RULE_expression = 9, RULE_comparison_op = 10, RULE_equality_op = 11, 
		RULE_statement = 12, RULE_statementList = 13, RULE_operationStat = 14, 
		RULE_assignmentStat = 15, RULE_ifStat = 16, RULE_whileStat = 17, RULE_returnStat = 18, 
		RULE_resultStat = 19, RULE_varDecl = 20, RULE_commandStat = 21, RULE_datatype = 22, 
		RULE_command = 23;
	public static readonly string[] ruleNames = {
		"program", "globalVarDecl", "inititalization", "functionDecl", "operationDecl", 
		"parameter", "paramList", "argument", "argumentList", "expression", "comparison_op", 
		"equality_op", "statement", "statementList", "operationStat", "assignmentStat", 
		"ifStat", "whileStat", "returnStat", "resultStat", "varDecl", "commandStat", 
		"datatype", "command"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u0625\u0637\u0628\u0639'", "'\u0627\u0637\u0628\u0639'", "'('", 
		"')'", "'['", "']'", "'{'", "'}'", "'&:'", "'*:'", "'\u062D\u062C\u0645:'", 
		"'\u060C'", "'\u061B'", "':'", "'+'", "'-'", "'\u00D7'", "'\u00F7'", "'\u066A'", 
		"'%'", "'&&'", "'||'", "'!'", "'<<'", "'>>>'", "'>>'", "'&'", "'|'", "'^'", 
		"'~'", "'<='", "'>='", "'<'", "'>'", "'=='", "'!='", "'='", "'\u062F\u0627\u0644\u0629'", 
		"'\u0639\u0645\u0644\u064A\u0629'", "'\u0631\u062C\u0648\u0639'", "'\u0627\u0644\u0646\u0627\u062A\u062C'", 
		null, "'\u0637\u0627\u0644\u0645\u0627'", "'\u0635\u0648\u0627\u0628'", 
		null, "'\u0642\u0637\u0639'", null, "'\u0635_\u0664'", "'\u0637_\u0664'", 
		"'\u0635_\u0661'", "'\u0637_\u0661'", "'\u0635_\u0662'", "'\u0637_\u0662'", 
		"'\u0635_\u0668'", "'\u0637_\u0668'", "'\u0645\u0646\u0637\u0642\u064A'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "LP", "RP", "LSB", "RSB", "LCB", "RCB", "ADDRESS_OF_OPERATOR", 
		"VALUE_INSIDE_OPERATOR", "SIZE_OF", "FASLA", "FASLA_MANQUOTA", "COLON", 
		"PLUS", "MINUS", "MULTIPLY", "DIVIDE", "ARABIC_MODULS", "MODULUS", "LAND", 
		"LOR", "LNOT", "SL_SYM", "SRA_SYM", "SR_SYM", "BAND_SYM", "BOR_SYM", "BXOR_SYM", 
		"BNOT_SYM", "LTE_SYM", "GTE_SYM", "LT_SYM", "GT_SYM", "EQUAL_SYM", "NOTEQ_SYM", 
		"ASSIGN_SYM", "FUNC_KEYWORD", "OP_KEYWORD", "RET_KEYWORD", "RES_KEYWORD", 
		"IF_KEYWORD", "WHILE_KEYWORD", "TRUE_KEYWORD", "FALSE_KEYWORD", "BREAK_KEYWORD", 
		"CONTINUE_KEYWORRD", "INT_DATA_TYPE", "UINT_DATA_TYPE", "BYTE_DATA_TYPE", 
		"UBYTE_DATA_TYPE", "SHORT_DATA_TYPE", "USHORT_DATA_TYPE", "LONG_DATA_TYPE", 
		"ULONG_DATA_TYPE", "BOOL_DATA_TYPE", "WHITE_SPACE", "ID", "Int_literal"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Geem.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GeemParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GeemParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GeemParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclContext[] globalVarDecl() {
			return GetRuleContexts<GlobalVarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVarDeclContext globalVarDecl(int i) {
			return GetRuleContext<GlobalVarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationDeclContext[] operationDecl() {
			return GetRuleContexts<OperationDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationDeclContext operationDecl(int i) {
			return GetRuleContext<OperationDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatContext[] commandStat() {
			return GetRuleContexts<CommandStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatContext commandStat(int i) {
			return GetRuleContext<CommandStatContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 52;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT_DATA_TYPE:
				case UINT_DATA_TYPE:
				case BYTE_DATA_TYPE:
				case UBYTE_DATA_TYPE:
				case SHORT_DATA_TYPE:
				case USHORT_DATA_TYPE:
				case LONG_DATA_TYPE:
				case ULONG_DATA_TYPE:
				case BOOL_DATA_TYPE:
					{
					State = 48;
					globalVarDecl();
					}
					break;
				case FUNC_KEYWORD:
					{
					State = 49;
					functionDecl();
					}
					break;
				case OP_KEYWORD:
					{
					State = 50;
					operationDecl();
					}
					break;
				case COLON:
					{
					State = 51;
					commandStat();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COLON) | (1L << FUNC_KEYWORD) | (1L << OP_KEYWORD) | (1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE) | (1L << BOOL_DATA_TYPE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InititalizationContext inititalization() {
			return GetRuleContext<InititalizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public GlobalVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarDecl; } }
	}

	[RuleVersion(0)]
	public GlobalVarDeclContext globalVarDecl() {
		GlobalVarDeclContext _localctx = new GlobalVarDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			datatype();
			State = 57;
			Match(ID);
			State = 58;
			inititalization();
			State = 59;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InititalizationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_SYM() { return GetToken(GeemParser.ASSIGN_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InititalizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inititalization; } }
	}

	[RuleVersion(0)]
	public InititalizationContext inititalization() {
		InititalizationContext _localctx = new InititalizationContext(Context, State);
		EnterRule(_localctx, 4, RULE_inititalization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 61;
			Match(ASSIGN_SYM);
			State = 62;
			expression(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_KEYWORD() { return GetToken(GeemParser.FUNC_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GeemParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(GeemParser.RCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(GeemParser.LCB, 0); }
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(FUNC_KEYWORD);
			State = 65;
			Match(ID);
			State = 66;
			Match(RP);
			State = 67;
			paramList();
			State = 68;
			Match(LP);
			State = 69;
			Match(COLON);
			State = 70;
			datatype();
			State = 71;
			Match(RCB);
			State = 72;
			statementList();
			State = 73;
			Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_KEYWORD() { return GetToken(GeemParser.OP_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(GeemParser.RCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(GeemParser.LCB, 0); }
		public OperationDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDecl; } }
	}

	[RuleVersion(0)]
	public OperationDeclContext operationDecl() {
		OperationDeclContext _localctx = new OperationDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_operationDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(OP_KEYWORD);
			State = 76;
			Match(ID);
			State = 77;
			Match(RP);
			State = 78;
			paramList();
			State = 79;
			Match(LP);
			State = 80;
			Match(RCB);
			State = 81;
			statementList();
			State = 82;
			Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			datatype();
			State = 85;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FASLA() { return GetTokens(GeemParser.FASLA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA(int i) {
			return GetToken(GeemParser.FASLA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 12, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE) | (1L << BOOL_DATA_TYPE))) != 0)) {
				{
				State = 87;
				parameter();
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FASLA) {
					{
					{
					State = 88;
					Match(FASLA);
					State = 89;
					parameter();
					}
					}
					State = 94;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 14, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FASLA() { return GetTokens(GeemParser.FASLA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA(int i) {
			return GetToken(GeemParser.FASLA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 16, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RP) | (1L << MINUS) | (1L << LNOT) | (1L << ID) | (1L << Int_literal))) != 0)) {
				{
				State = 99;
				argument();
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FASLA) {
					{
					{
					State = 100;
					Match(FASLA);
					State = 101;
					argument();
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public SymbolTable st;
		public string expression_datatype;
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
			this.st = context.st;
			this.expression_datatype = context.expression_datatype;
		}
	}
	public partial class Lor_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOR() { return GetToken(GeemParser.LOR, 0); }
		public Lor_exprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Add_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GeemParser.PLUS, 0); }
		public Add_exprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Land_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAND() { return GetToken(GeemParser.LAND, 0); }
		public Land_exprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Comparison_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_opContext comparison_op() {
			return GetRuleContext<Comparison_opContext>(0);
		}
		public Comparison_exprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Multiply_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(GeemParser.MULTIPLY, 0); }
		public Multiply_exprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Variable_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		public Variable_exprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Parenthesis_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		public Parenthesis_exprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Int_literal_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int_literal() { return GetToken(GeemParser.Int_literal, 0); }
		public Int_literal_exprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Subtraction_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GeemParser.MINUS, 0); }
		public Subtraction_exprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Divide_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(GeemParser.DIVIDE, 0); }
		public Divide_exprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Fun_call_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		public Fun_call_exprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Minus_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GeemParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Minus_exprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Lnot_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LNOT() { return GetToken(GeemParser.LNOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Lnot_exprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Equality_exprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_opContext equality_op() {
			return GetRuleContext<Equality_opContext>(0);
		}
		public Equality_exprContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new Fun_call_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 110;
				Match(ID);
				State = 111;
				Match(RP);
				State = 112;
				argumentList();
				State = 113;
				Match(LP);
				}
				break;
			case 2:
				{
				_localctx = new Minus_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 115;
				Match(MINUS);
				State = 116;
				expression(13);
				}
				break;
			case 3:
				{
				_localctx = new Lnot_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 117;
				Match(LNOT);
				State = 118;
				expression(12);
				}
				break;
			case 4:
				{
				_localctx = new Parenthesis_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119;
				Match(RP);
				State = 120;
				expression(0);
				State = 121;
				Match(LP);
				}
				break;
			case 5:
				{
				_localctx = new Int_literal_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 123;
				Match(Int_literal);
				}
				break;
			case 6:
				{
				_localctx = new Variable_exprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 124;
				Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 155;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 153;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new Divide_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 127;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 128;
						Match(DIVIDE);
						State = 129;
						expression(12);
						}
						break;
					case 2:
						{
						_localctx = new Multiply_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 130;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 131;
						Match(MULTIPLY);
						State = 132;
						expression(11);
						}
						break;
					case 3:
						{
						_localctx = new Subtraction_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 133;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 134;
						Match(MINUS);
						State = 135;
						expression(10);
						}
						break;
					case 4:
						{
						_localctx = new Add_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 136;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 137;
						Match(PLUS);
						State = 138;
						expression(9);
						}
						break;
					case 5:
						{
						_localctx = new Comparison_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 139;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 140;
						comparison_op();
						State = 141;
						expression(8);
						}
						break;
					case 6:
						{
						_localctx = new Equality_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 143;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 144;
						equality_op();
						State = 145;
						expression(7);
						}
						break;
					case 7:
						{
						_localctx = new Land_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 147;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 148;
						Match(LAND);
						State = 149;
						expression(6);
						}
						break;
					case 8:
						{
						_localctx = new Lor_exprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 150;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 151;
						Match(LOR);
						State = 152;
						expression(5);
						}
						break;
					}
					} 
				}
				State = 157;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE_SYM() { return GetToken(GeemParser.GTE_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE_SYM() { return GetToken(GeemParser.LTE_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_SYM() { return GetToken(GeemParser.GT_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_SYM() { return GetToken(GeemParser.LT_SYM, 0); }
		public Comparison_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_op; } }
	}

	[RuleVersion(0)]
	public Comparison_opContext comparison_op() {
		Comparison_opContext _localctx = new Comparison_opContext(Context, State);
		EnterRule(_localctx, 20, RULE_comparison_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTE_SYM) | (1L << GTE_SYM) | (1L << LT_SYM) | (1L << GT_SYM))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYM() { return GetToken(GeemParser.EQUAL_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQ_SYM() { return GetToken(GeemParser.NOTEQ_SYM, 0); }
		public Equality_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_op; } }
	}

	[RuleVersion(0)]
	public Equality_opContext equality_op() {
		Equality_opContext _localctx = new Equality_opContext(Context, State);
		EnterRule(_localctx, 22, RULE_equality_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL_SYM || _la==NOTEQ_SYM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SymbolTable st;
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
			this.st = context.st;
		}
	}
	public partial class Command_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatContext commandStat() {
			return GetRuleContext<CommandStatContext>(0);
		}
		public Command_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Var_Decl_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public Var_Decl_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Break_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK_KEYWORD() { return GetToken(GeemParser.BREAK_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public Break_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class If_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		public If_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Return_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatContext returnStat() {
			return GetRuleContext<ReturnStatContext>(0);
		}
		public Return_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Continue_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_KEYWORRD() { return GetToken(GeemParser.CONTINUE_KEYWORRD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public Continue_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class While_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatContext whileStat() {
			return GetRuleContext<WhileStatContext>(0);
		}
		public While_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Result_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResultStatContext resultStat() {
			return GetRuleContext<ResultStatContext>(0);
		}
		public Result_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Operation_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationStatContext operationStat() {
			return GetRuleContext<OperationStatContext>(0);
		}
		public Operation_StatContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Assignment_StatContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatContext assignmentStat() {
			return GetRuleContext<AssignmentStatContext>(0);
		}
		public Assignment_StatContext(StatementContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new Assignment_StatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 162;
				assignmentStat();
				}
				break;
			case 2:
				_localctx = new Return_StatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 163;
				returnStat();
				}
				break;
			case 3:
				_localctx = new Result_StatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 164;
				resultStat();
				}
				break;
			case 4:
				_localctx = new If_StatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 165;
				ifStat();
				}
				break;
			case 5:
				_localctx = new While_StatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 166;
				whileStat();
				}
				break;
			case 6:
				_localctx = new Var_Decl_StatContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 167;
				varDecl();
				}
				break;
			case 7:
				_localctx = new Operation_StatContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 168;
				operationStat();
				}
				break;
			case 8:
				_localctx = new Command_StatContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 169;
				commandStat();
				}
				break;
			case 9:
				_localctx = new Break_StatContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 170;
				Match(BREAK_KEYWORD);
				State = 171;
				Match(FASLA_MANQUOTA);
				}
				break;
			case 10:
				_localctx = new Continue_StatContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 172;
				Match(CONTINUE_KEYWORRD);
				State = 173;
				Match(FASLA_MANQUOTA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 26, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COLON) | (1L << RET_KEYWORD) | (1L << RES_KEYWORD) | (1L << IF_KEYWORD) | (1L << WHILE_KEYWORD) | (1L << BREAK_KEYWORD) | (1L << CONTINUE_KEYWORRD) | (1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE) | (1L << BOOL_DATA_TYPE) | (1L << ID))) != 0)) {
				{
				{
				State = 176;
				statement();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public OperationStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationStat; } }
	}

	[RuleVersion(0)]
	public OperationStatContext operationStat() {
		OperationStatContext _localctx = new OperationStatContext(Context, State);
		EnterRule(_localctx, 28, RULE_operationStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(ID);
			State = 183;
			Match(RP);
			State = 184;
			argumentList();
			State = 185;
			Match(LP);
			State = 186;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_SYM() { return GetToken(GeemParser.ASSIGN_SYM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public AssignmentStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStat; } }
	}

	[RuleVersion(0)]
	public AssignmentStatContext assignmentStat() {
		AssignmentStatContext _localctx = new AssignmentStatContext(Context, State);
		EnterRule(_localctx, 30, RULE_assignmentStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(ID);
			State = 189;
			Match(ASSIGN_SYM);
			State = 190;
			expression(0);
			State = 191;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_KEYWORD() { return GetToken(GeemParser.IF_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(GeemParser.RCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(GeemParser.LCB, 0); }
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(IF_KEYWORD);
			State = 194;
			Match(RP);
			State = 195;
			expression(0);
			State = 196;
			Match(LP);
			State = 197;
			Match(RCB);
			State = 198;
			statementList();
			State = 199;
			Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_KEYWORD() { return GetToken(GeemParser.WHILE_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(GeemParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(GeemParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(GeemParser.RCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(GeemParser.LCB, 0); }
		public WhileStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStat; } }
	}

	[RuleVersion(0)]
	public WhileStatContext whileStat() {
		WhileStatContext _localctx = new WhileStatContext(Context, State);
		EnterRule(_localctx, 34, RULE_whileStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(WHILE_KEYWORD);
			State = 202;
			Match(RP);
			State = 203;
			expression(0);
			State = 204;
			Match(LP);
			State = 205;
			Match(RCB);
			State = 206;
			statementList();
			State = 207;
			Match(LCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RET_KEYWORD() { return GetToken(GeemParser.RET_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public ReturnStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStat; } }
	}

	[RuleVersion(0)]
	public ReturnStatContext returnStat() {
		ReturnStatContext _localctx = new ReturnStatContext(Context, State);
		EnterRule(_localctx, 36, RULE_returnStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(RET_KEYWORD);
			State = 210;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RES_KEYWORD() { return GetToken(GeemParser.RES_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public ResultStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultStat; } }
	}

	[RuleVersion(0)]
	public ResultStatContext resultStat() {
		ResultStatContext _localctx = new ResultStatContext(Context, State);
		EnterRule(_localctx, 38, RULE_resultStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(RES_KEYWORD);
			State = 213;
			expression(0);
			State = 214;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public SymbolTable st;
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GeemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InititalizationContext inititalization() {
			return GetRuleContext<InititalizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 40, RULE_varDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			datatype();
			State = 217;
			Match(ID);
			State = 218;
			inititalization();
			State = 219;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FASLA_MANQUOTA() { return GetToken(GeemParser.FASLA_MANQUOTA, 0); }
		public CommandStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandStat; } }
	}

	[RuleVersion(0)]
	public CommandStatContext commandStat() {
		CommandStatContext _localctx = new CommandStatContext(Context, State);
		EnterRule(_localctx, 42, RULE_commandStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			command();
			State = 222;
			Match(FASLA_MANQUOTA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_DATA_TYPE() { return GetToken(GeemParser.INT_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT_DATA_TYPE() { return GetToken(GeemParser.UINT_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_DATA_TYPE() { return GetToken(GeemParser.BYTE_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UBYTE_DATA_TYPE() { return GetToken(GeemParser.UBYTE_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT_DATA_TYPE() { return GetToken(GeemParser.SHORT_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USHORT_DATA_TYPE() { return GetToken(GeemParser.USHORT_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_DATA_TYPE() { return GetToken(GeemParser.LONG_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONG_DATA_TYPE() { return GetToken(GeemParser.ULONG_DATA_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_DATA_TYPE() { return GetToken(GeemParser.BOOL_DATA_TYPE, 0); }
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_datatype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_DATA_TYPE) | (1L << UINT_DATA_TYPE) | (1L << BYTE_DATA_TYPE) | (1L << UBYTE_DATA_TYPE) | (1L << SHORT_DATA_TYPE) | (1L << USHORT_DATA_TYPE) | (1L << LONG_DATA_TYPE) | (1L << ULONG_DATA_TYPE) | (1L << BOOL_DATA_TYPE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GeemParser.COLON, 0); }
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 46, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 226;
			Match(COLON);
			State = 227;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
			State = 229;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '=', '\xEA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x6', '\x2', '\x37', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '\x38', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		']', '\n', '\b', '\f', '\b', '\xE', '\b', '`', '\v', '\b', '\x5', '\b', 
		'\x62', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', 'i', '\n', '\n', '\f', '\n', '\xE', '\n', 'l', 
		'\v', '\n', '\x5', '\n', 'n', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x80', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x9C', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\x9F', '\v', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\xB1', '\n', '\xE', '\x3', '\xF', '\a', '\xF', '\xB4', '\n', '\xF', '\f', 
		'\xF', '\xE', '\xF', '\xB7', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x2', '\x3', '\x14', '\x1A', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x2', '\x6', '\x3', '\x2', '!', '$', '\x3', '\x2', 
		'%', '&', '\x3', '\x2', '\x32', ':', '\x3', '\x2', '\x3', '\x4', '\x2', 
		'\xF0', '\x2', '\x36', '\x3', '\x2', '\x2', '\x2', '\x4', ':', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '?', '\x3', '\x2', '\x2', '\x2', '\b', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'M', '\x3', '\x2', '\x2', '\x2', '\f', 
		'V', '\x3', '\x2', '\x2', '\x2', '\xE', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x63', '\x3', '\x2', '\x2', '\x2', '\x12', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xB0', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xB8', '\x3', '\x2', '\x2', '\x2', ' ', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xCB', '\x3', '\x2', '\x2', '\x2', '&', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xD6', '\x3', '\x2', '\x2', '\x2', '*', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', ',', '\xDF', '\x3', '\x2', '\x2', '\x2', '.', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\xE4', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x37', '\x5', '\x4', '\x3', '\x2', '\x33', '\x37', '\x5', '\b', '\x5', 
		'\x2', '\x34', '\x37', '\x5', '\n', '\x6', '\x2', '\x35', '\x37', '\x5', 
		',', '\x17', '\x2', '\x36', '\x32', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x39', '\x3', '\x3', '\x2', '\x2', 
		'\x2', ':', ';', '\x5', '.', '\x18', '\x2', ';', '<', '\a', '<', '\x2', 
		'\x2', '<', '=', '\x5', '\x6', '\x4', '\x2', '=', '>', '\a', '\xF', '\x2', 
		'\x2', '>', '\x5', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\'', '\x2', 
		'\x2', '@', '\x41', '\x5', '\x14', '\v', '\x2', '\x41', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x43', '\a', '(', '\x2', '\x2', '\x43', '\x44', 
		'\a', '<', '\x2', '\x2', '\x44', '\x45', '\a', '\x6', '\x2', '\x2', '\x45', 
		'\x46', '\x5', '\xE', '\b', '\x2', '\x46', 'G', '\a', '\x5', '\x2', '\x2', 
		'G', 'H', '\a', '\x10', '\x2', '\x2', 'H', 'I', '\x5', '.', '\x18', '\x2', 
		'I', 'J', '\a', '\n', '\x2', '\x2', 'J', 'K', '\x5', '\x1C', '\xF', '\x2', 
		'K', 'L', '\a', '\t', '\x2', '\x2', 'L', '\t', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\a', ')', '\x2', '\x2', 'N', 'O', '\a', '<', '\x2', '\x2', 
		'O', 'P', '\a', '\x6', '\x2', '\x2', 'P', 'Q', '\x5', '\xE', '\b', '\x2', 
		'Q', 'R', '\a', '\x5', '\x2', '\x2', 'R', 'S', '\a', '\n', '\x2', '\x2', 
		'S', 'T', '\x5', '\x1C', '\xF', '\x2', 'T', 'U', '\a', '\t', '\x2', '\x2', 
		'U', '\v', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x5', '.', '\x18', '\x2', 
		'W', 'X', '\a', '<', '\x2', '\x2', 'X', '\r', '\x3', '\x2', '\x2', '\x2', 
		'Y', '^', '\x5', '\f', '\a', '\x2', 'Z', '[', '\a', '\xE', '\x2', '\x2', 
		'[', ']', '\x5', '\f', '\a', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', 
		']', '`', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', 
		'\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '\x61', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x5', '\x14', '\v', 
		'\x2', '\x64', '\x11', '\x3', '\x2', '\x2', '\x2', '\x65', 'j', '\x5', 
		'\x10', '\t', '\x2', '\x66', 'g', '\a', '\xE', '\x2', '\x2', 'g', 'i', 
		'\x5', '\x10', '\t', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'i', 
		'l', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'm', '\x65', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\b', '\v', '\x1', '\x2', 'p', 'q', '\a', '<', 
		'\x2', '\x2', 'q', 'r', '\a', '\x6', '\x2', '\x2', 'r', 's', '\x5', '\x12', 
		'\n', '\x2', 's', 't', '\a', '\x5', '\x2', '\x2', 't', '\x80', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'v', '\a', '\x12', '\x2', '\x2', 'v', '\x80', 
		'\x5', '\x14', '\v', '\xF', 'w', 'x', '\a', '\x19', '\x2', '\x2', 'x', 
		'\x80', '\x5', '\x14', '\v', '\xE', 'y', 'z', '\a', '\x6', '\x2', '\x2', 
		'z', '{', '\x5', '\x14', '\v', '\x2', '{', '|', '\a', '\x5', '\x2', '\x2', 
		'|', '\x80', '\x3', '\x2', '\x2', '\x2', '}', '\x80', '\a', '=', '\x2', 
		'\x2', '~', '\x80', '\a', '<', '\x2', '\x2', '\x7F', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', 'u', '\x3', '\x2', '\x2', '\x2', '\x7F', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', 'y', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\f', '\r', 
		'\x2', '\x2', '\x82', '\x83', '\a', '\x14', '\x2', '\x2', '\x83', '\x9C', 
		'\x5', '\x14', '\v', '\xE', '\x84', '\x85', '\f', '\f', '\x2', '\x2', 
		'\x85', '\x86', '\a', '\x13', '\x2', '\x2', '\x86', '\x9C', '\x5', '\x14', 
		'\v', '\r', '\x87', '\x88', '\f', '\v', '\x2', '\x2', '\x88', '\x89', 
		'\a', '\x12', '\x2', '\x2', '\x89', '\x9C', '\x5', '\x14', '\v', '\f', 
		'\x8A', '\x8B', '\f', '\n', '\x2', '\x2', '\x8B', '\x8C', '\a', '\x11', 
		'\x2', '\x2', '\x8C', '\x9C', '\x5', '\x14', '\v', '\v', '\x8D', '\x8E', 
		'\f', '\t', '\x2', '\x2', '\x8E', '\x8F', '\x5', '\x16', '\f', '\x2', 
		'\x8F', '\x90', '\x5', '\x14', '\v', '\n', '\x90', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x92', '\f', '\b', '\x2', '\x2', '\x92', '\x93', 
		'\x5', '\x18', '\r', '\x2', '\x93', '\x94', '\x5', '\x14', '\v', '\t', 
		'\x94', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\f', '\a', 
		'\x2', '\x2', '\x96', '\x97', '\a', '\x17', '\x2', '\x2', '\x97', '\x9C', 
		'\x5', '\x14', '\v', '\b', '\x98', '\x99', '\f', '\x6', '\x2', '\x2', 
		'\x99', '\x9A', '\a', '\x18', '\x2', '\x2', '\x9A', '\x9C', '\x5', '\x14', 
		'\v', '\a', '\x9B', '\x81', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x9B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x91', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\xA1', '\t', '\x2', '\x2', '\x2', '\xA1', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\xA3', '\t', '\x3', '\x2', '\x2', '\xA3', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xB1', '\x5', ' ', '\x11', '\x2', 
		'\xA5', '\xB1', '\x5', '&', '\x14', '\x2', '\xA6', '\xB1', '\x5', '(', 
		'\x15', '\x2', '\xA7', '\xB1', '\x5', '\"', '\x12', '\x2', '\xA8', '\xB1', 
		'\x5', '$', '\x13', '\x2', '\xA9', '\xB1', '\x5', '*', '\x16', '\x2', 
		'\xAA', '\xB1', '\x5', '\x1E', '\x10', '\x2', '\xAB', '\xB1', '\x5', ',', 
		'\x17', '\x2', '\xAC', '\xAD', '\a', '\x30', '\x2', '\x2', '\xAD', '\xB1', 
		'\a', '\xF', '\x2', '\x2', '\xAE', '\xAF', '\a', '\x31', '\x2', '\x2', 
		'\xAF', '\xB1', '\a', '\xF', '\x2', '\x2', '\xB0', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB1', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xB4', '\x5', '\x1A', '\xE', '\x2', '\xB3', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '<', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', '\x6', '\x2', '\x2', '\xBA', '\xBB', '\x5', '\x12', '\n', 
		'\x2', '\xBB', '\xBC', '\a', '\x5', '\x2', '\x2', '\xBC', '\xBD', '\a', 
		'\xF', '\x2', '\x2', '\xBD', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xBF', '\a', '<', '\x2', '\x2', '\xBF', '\xC0', '\a', '\'', '\x2', '\x2', 
		'\xC0', '\xC1', '\x5', '\x14', '\v', '\x2', '\xC1', '\xC2', '\a', '\xF', 
		'\x2', '\x2', '\xC2', '!', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', 
		'\a', ',', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x6', '\x2', '\x2', '\xC5', 
		'\xC6', '\x5', '\x14', '\v', '\x2', '\xC6', '\xC7', '\a', '\x5', '\x2', 
		'\x2', '\xC7', '\xC8', '\a', '\n', '\x2', '\x2', '\xC8', '\xC9', '\x5', 
		'\x1C', '\xF', '\x2', '\xC9', '\xCA', '\a', '\t', '\x2', '\x2', '\xCA', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', '-', '\x2', '\x2', 
		'\xCC', '\xCD', '\a', '\x6', '\x2', '\x2', '\xCD', '\xCE', '\x5', '\x14', 
		'\v', '\x2', '\xCE', '\xCF', '\a', '\x5', '\x2', '\x2', '\xCF', '\xD0', 
		'\a', '\n', '\x2', '\x2', '\xD0', '\xD1', '\x5', '\x1C', '\xF', '\x2', 
		'\xD1', '\xD2', '\a', '\t', '\x2', '\x2', '\xD2', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD4', '\a', '*', '\x2', '\x2', '\xD4', '\xD5', '\a', 
		'\xF', '\x2', '\x2', '\xD5', '\'', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\a', '+', '\x2', '\x2', '\xD7', '\xD8', '\x5', '\x14', '\v', 
		'\x2', '\xD8', '\xD9', '\a', '\xF', '\x2', '\x2', '\xD9', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\x5', '.', '\x18', '\x2', '\xDB', 
		'\xDC', '\a', '<', '\x2', '\x2', '\xDC', '\xDD', '\x5', '\x6', '\x4', 
		'\x2', '\xDD', '\xDE', '\a', '\xF', '\x2', '\x2', '\xDE', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE0', '\x5', '\x30', '\x19', '\x2', '\xE0', 
		'\xE1', '\a', '\xF', '\x2', '\x2', '\xE1', '-', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE3', '\t', '\x4', '\x2', '\x2', '\xE3', '/', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE5', '\a', '\x10', '\x2', '\x2', '\xE5', '\xE6', 
		'\t', '\x5', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE8', '\x5', '\x14', '\v', '\x2', '\xE8', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\r', '\x36', '\x38', '^', '\x61', 'j', 'm', '\x7F', '\x9B', 
		'\x9D', '\xB0', '\xB5',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Geem.Parser
